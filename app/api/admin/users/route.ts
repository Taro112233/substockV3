// üìÑ File: app/api/admin/users/route.ts (Fixed ESLint warnings)
import { PrismaClient } from '@prisma/client'
import { NextResponse } from 'next/server' // ‚úÖ ‡∏•‡∏ö NextRequest ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
import { getServerUser } from '@/lib/auth-server'

const prisma = new PrismaClient()

export async function GET() { // ‚úÖ ‡∏•‡∏ö request parameter ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
  try {
    // Check authentication ‡∏î‡πâ‡∏ß‡∏¢ function ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const currentUser = await getServerUser()
    if (!currentUser) {
      return NextResponse.json({ 
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô' 
      }, { status: 401 })
    }

    // Get all users with their information
    const users = await prisma.user.findMany({
      select: {
        id: true,
        username: true,
        firstName: true,
        lastName: true,
        position: true,
        status: true,
        isActive: true,
        createdAt: true,
        lastLogin: true
      },
      orderBy: [
        { status: 'asc' }, // UNAPPROVED first
        { createdAt: 'desc' }
      ]
    })

    // Transform data to include fullName
    const transformedUsers = users.map(user => ({
      ...user,
      fullName: `${user.firstName} ${user.lastName}`,
      createdAt: user.createdAt.toISOString(),
      lastLogin: user.lastLogin?.toISOString()
    }))

    return NextResponse.json({
      success: true,
      users: transformedUsers
    })

  } catch (error) {
    console.error('Error fetching users:', error)
    return NextResponse.json({ 
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
}