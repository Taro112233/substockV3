// üìÑ File: app/api/drugs/[drugId]/route.ts
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (GET, PATCH, DELETE) - NO AUTHENTICATION
// ‚úÖ Fixed TypeScript Strict Mode ‡πÅ‡∏•‡∏∞ ESLint warnings

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'
import { Prisma } from '@prisma/client'

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
const updateDrugSchema = z.object({
  hospitalDrugCode: z
    .string()
    .min(1, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô')
    .max(50, '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  name: z
    .string()
    .min(1, '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô')
    .max(255, '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 255 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  genericName: z
    .string()
    .max(255, '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 255 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
    .nullable()
    .optional(),
  dosageForm: z.enum([
    'APP', 'BAG', 'CAP', 'CR', 'DOP', 'ENE', 'GEL', 'HAN', 'IMP',
    'INJ', 'LIQ', 'LOT', 'LVP', 'MDI', 'MIX', 'NAS', 'NB', 'OIN',
    'PAT', 'POW', 'PWD', 'SAC', 'SOL', 'SPR', 'SUP', 'SUS', 'SYR',
    'TAB', 'TUR'
  ], {
    message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
  }),
  strength: z
    .string()
    .max(50, '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
    .nullable()
    .optional(),
  unit: z
    .string()
    .min(1, '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô')
    .max(20, '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
  packageSize: z
    .string()
    .max(50, '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
    .nullable()
    .optional(),
  pricePerBox: z
    .number()
    .min(0, '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0')
    .max(999999.99, '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 999,999.99'),
  category: z.enum([
    'REFER', 'HAD', 'NARCOTIC', 'REFRIGERATED', 'PSYCHIATRIC',
    'FLUID', 'GENERAL', 'TABLET', 'SYRUP', 'INJECTION', 'EXTEMP', 'ALERT', 'CANCELLED'
  ], {
    message: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
  }),
  notes: z
    .string()
    .max(1000, '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
    .nullable()
    .optional(),
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transaction
  userId: z.string().min(1, 'User ID ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô').optional(),
})

// Route context interface
interface RouteContext {
  params: Promise<{ drugId: string }>
}

// Type-safe error response
interface ErrorResponse {
  error: string
  details?: string
}

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
export async function GET(request: NextRequest, context: RouteContext) {
  try {
    const { drugId } = await context.params

    const drug = await prisma.drug.findUnique({
      where: { id: drugId },
      include: {
        stocks: {
          select: {
            id: true,
            department: true,
            totalQuantity: true,
            reservedQty: true,
            minimumStock: true,
            fixedStock: true,
            totalValue: true,
            lastUpdated: true
          }
        },
        _count: {
          select: {
            transferItems: true,
            stocks: true
          }
        }
      }
    })

    if (!drug) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' }, { status: 404 })
    }

    return NextResponse.json({
      success: true,
      data: drug
    })

  } catch (error: unknown) {
    console.error('Get drug error:', error)
    return NextResponse.json<ErrorResponse>(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' },
      { status: 500 }
    )
  }
}

// PATCH - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
export async function PATCH(request: NextRequest, context: RouteContext) {
  try {
    const { drugId } = await context.params

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏¢‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingDrug = await prisma.drug.findUnique({
      where: { id: drugId },
      include: {
        stocks: {
          select: {
            totalQuantity: true,
            totalValue: true
          }
        }
      }
    })

    if (!existingDrug) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' }, { status: 404 })
    }

    // Parse ‡πÅ‡∏•‡∏∞ validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    const body = await request.json()
    const validatedData = updateDrugSchema.parse(body)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™)
    if (validatedData.hospitalDrugCode !== existingDrug.hospitalDrugCode) {
      const duplicateCode = await prisma.drug.findFirst({
        where: {
          hospitalDrugCode: validatedData.hospitalDrugCode,
          id: { not: drugId }
        }
      })

      if (duplicateCode) {
        return NextResponse.json({ 
          error: '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' 
        }, { status: 400 })
      }
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    const priceChanged = validatedData.pricePerBox !== existingDrug.pricePerBox
    const oldPrice = existingDrug.pricePerBox
    const newPrice = validatedData.pricePerBox

    // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å
    const result = await prisma.$transaction(async (tx) => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
      const updatedDrug = await tx.drug.update({
        where: { id: drugId },
        data: {
          hospitalDrugCode: validatedData.hospitalDrugCode,
          name: validatedData.name,
          genericName: validatedData.genericName,
          dosageForm: validatedData.dosageForm,
          strength: validatedData.strength,
          unit: validatedData.unit,
          packageSize: validatedData.packageSize,
          pricePerBox: validatedData.pricePerBox,
          category: validatedData.category,
          notes: validatedData.notes,
          updatedAt: new Date()
        }
      })

      // ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï total value ‡∏Ç‡∏≠‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
      if (priceChanged) {
        await tx.stock.updateMany({
          where: { drugId },
          data: {
            totalValue: {
              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å totalQuantity * newPrice
              multiply: newPrice / (oldPrice || 1)
            },
            lastUpdated: new Date()
          }
        })
      }

      return updatedDrug
    })

    return NextResponse.json({
      success: true,
      data: result,
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ "${validatedData.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      priceChanged,
      oldPrice: priceChanged ? oldPrice : undefined,
      newPrice: priceChanged ? newPrice : undefined
    })

  } catch (error: unknown) {
    console.error('Update drug error:', error)

    // Zod validation error
    if (error instanceof z.ZodError) {
      return NextResponse.json<ErrorResponse>(
        {
          error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: error.issues.map((issue) => issue.message).join(', ')
        },
        { status: 400 }
      )
    }

    // Prisma unique constraint error
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === 'P2002') {
        const target = error.meta?.target
        const field = Array.isArray(target) ? target[0] : undefined
        let message = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'

        if (field === 'hospitalDrugCode') {
          message = '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
        } else if (field === 'name') {
          message = '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
        }

        return NextResponse.json({ error: message }, { status: 400 })
      }
    }

    // Generic error
    return NextResponse.json<ErrorResponse>(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' },
      { status: 500 }
    )
  }
}

// DELETE - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
export async function DELETE(request: NextRequest, context: RouteContext) {
  try {
    const { drugId } = await context.params

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏¢‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingDrug = await prisma.drug.findUnique({
      where: { id: drugId },
      include: {
        stocks: {
          where: {
            totalQuantity: { gt: 0 }
          }
        },
        transferItems: { take: 1 },
        _count: {
          select: {
            transferItems: true,
            stocks: true
          }
        }
      }
    })

    if (!existingDrug) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' }, { status: 404 })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (existingDrug.stocks.length > 0) {
      return NextResponse.json<ErrorResponse>({ 
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà' 
      }, { status: 400 })
    }

    if (existingDrug._count.transferItems > 0) {
      return NextResponse.json<ErrorResponse>({ 
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß' 
      }, { status: 400 })
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ (cascade delete ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stocks ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
    await prisma.drug.delete({
      where: { id: drugId }
    })

    return NextResponse.json({
      success: true,
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ "${existingDrug.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    })

  } catch (error: unknown) {
    console.error('Delete drug error:', error)
    return NextResponse.json<ErrorResponse>(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤' },
      { status: 500 }
    )
  }
}