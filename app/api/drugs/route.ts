// üìÑ File: app/api/drugs/route.ts (FIXED)
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç validation ‡πÅ‡∏•‡∏∞ response

import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { z, ZodError, ZodIssue } from "zod";
import { Prisma, Department } from "@prisma/client";

// ‚úÖ Fixed: Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å modal)
const createDrugSchema = z.object({
  hospitalDrugCode: z
    .string()
    .min(1, "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
    .max(50, "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  name: z
    .string()
    .min(1, "‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
    .max(255, "‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 255 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  genericName: z
    .string()
    .max(255, "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 255 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    .nullable()
    .optional()
    .transform((val) => val === "" ? null : val), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô null
  dosageForm: z.enum(
    [
      "APP", "BAG", "CAP", "CR", "DOP", "ENE", "GEL", "HAN", "IMP",
      "INJ", "LIQ", "LOT", "LVP", "MDI", "MIX", "NAS", "NB", "OIN",
      "PAT", "POW", "PWD", "SAC", "SOL", "SPR", "SUP", "SUS", "SYR",
      "TAB", "TUR",
    ],
    {
      message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    }
  ),
  strength: z
    .string()
    .max(50, "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    .nullable()
    .optional()
    .transform((val) => val === "" ? null : val), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô null
  unit: z
    .string()
    .min(1, "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
    .max(20, "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  packageSize: z
    .string()
    .max(50, "‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    .nullable()
    .optional()
    .transform((val) => val === "" ? null : val), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô null
  pricePerBox: z
    .number()
    .min(0, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0")
    .max(999999.99, "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 999,999.99"),
  category: z.enum(
    [
      "REFER", "HAD", "NARCOTIC", "REFRIGERATED", "PSYCHIATRIC",
      "FLUID", "GENERAL", "TABLET", "SYRUP", "INJECTION", "EXTEMP", "ALERT",
    ],
    {
      message: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    }
  ),
  notes: z
    .string()
    .max(1000, "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    .nullable()
    .optional()
    .transform((val) => val === "" ? null : val), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô null
  
  // ‚úÖ Fixed: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå stock ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å modal
  initialQuantity: z
    .number()
    .min(0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0")
    .default(0),
  minimumStock: z
    .number()
    .min(0, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0")
    .default(10),
  
  // ‚úÖ Fixed: ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å modal
  department: z.enum(["PHARMACY", "OPD"], {
    message: "‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
  })
});

// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const search = searchParams.get("search");
    const category = searchParams.get("category");
    const department = searchParams.get("department") as Department | null;

    // Build where clause
    const where: any = {
      isActive: true, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    };

    // Search filter
    if (search) {
      where.OR = [
        { name: { contains: search, mode: "insensitive" } },
        { genericName: { contains: search, mode: "insensitive" } },
        { hospitalDrugCode: { contains: search, mode: "insensitive" } },
      ];
    }

    // Category filter
    if (category) {
      where.category = category;
    }

    const drugs = await prisma.drug.findMany({
      where,
      include: {
        stocks: department ? {
          where: { department }
        } : true,
        _count: {
          select: {
            stocks: true,
          },
        },
      },
      orderBy: {
        name: "asc",
      },
    });

    return NextResponse.json({
      success: true,
      data: drugs,
    });
  } catch (error) {
    console.error("Get drugs error:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤" },
      { status: 500 }
    );
  }
}

// POST - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (NO AUTHENTICATION)
export async function POST(request: NextRequest) {
  try {
    // Get and validate input data
    const body = await request.json();
    console.log('üìù Received data:', JSON.stringify(body, null, 2));
    
    // ‚úÖ Fixed: Validate ‡∏Å‡∏±‡∏ö schema ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    const validatedData = createDrugSchema.parse(body);
    console.log('‚úÖ Validated data:', JSON.stringify(validatedData, null, 2));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingDrugByCode = await prisma.drug.findFirst({
      where: {
        hospitalDrugCode: validatedData.hospitalDrugCode,
      },
    });

    if (existingDrugByCode) {
      return NextResponse.json(
        {
          error: "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
        },
        { status: 409 } // ‚úÖ Fixed: ‡πÉ‡∏ä‡πâ 409 Conflict ‡πÅ‡∏ó‡∏ô 400
      );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const initialTotalValue =
      validatedData.initialQuantity * validatedData.pricePerBox;

    console.log(`üí∞ Initial stock value: ${initialTotalValue} baht`);

    // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const result = await prisma.$transaction(async (tx) => {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
      const newDrug = await tx.drug.create({
        data: {
          hospitalDrugCode: validatedData.hospitalDrugCode,
          name: validatedData.name,
          genericName: validatedData.genericName,
          dosageForm: validatedData.dosageForm,
          strength: validatedData.strength,
          unit: validatedData.unit,
          packageSize: validatedData.packageSize,
          pricePerBox: validatedData.pricePerBox,
          category: validatedData.category,
          notes: validatedData.notes,
          isActive: true,
        },
      });

      console.log(`‚úÖ Created drug: ${newDrug.id} - ${newDrug.name}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const primaryStock = await tx.stock.create({
        data: {
          drugId: newDrug.id,
          department: validatedData.department,
          totalQuantity: validatedData.initialQuantity,
          reservedQty: 0,
          minimumStock: validatedData.minimumStock,
          totalValue: initialTotalValue,
          lastUpdated: new Date(),
        },
      });

      console.log(`üì¶ Created stock for ${validatedData.department}: ${primaryStock.totalQuantity} units`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (quantity = 0)
      const secondaryDepartment = validatedData.department === "PHARMACY" ? "OPD" : "PHARMACY";
      const secondaryStock = await tx.stock.create({
        data: {
          drugId: newDrug.id,
          department: secondaryDepartment as Department,
          totalQuantity: 0,
          reservedQty: 0,
          minimumStock: 0,
          totalValue: 0,
          lastUpdated: new Date(),
        },
      });

      console.log(`üì¶ Created secondary stock for ${secondaryDepartment}: 0 units`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction record ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö initial stock (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (validatedData.initialQuantity > 0) {
        await tx.stockTransaction.create({
          data: {
            stockId: primaryStock.id,
            userId: 'SYSTEM', // ‚úÖ ‡πÉ‡∏ä‡πâ SYSTEM ‡πÅ‡∏ó‡∏ô user.id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ authentication
            type: 'TRANSFER_IN',
            quantity: validatedData.initialQuantity,
            beforeQty: 0,
            afterQty: validatedData.initialQuantity,
            reference: `INITIAL_${newDrug.hospitalDrugCode}`,
            note: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ${newDrug.name}`
          }
        });

        console.log(`üìù Created initial stock transaction for ${validatedData.initialQuantity} units`);
      }

      // ‚úÖ Fixed: Return data ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà modal ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (Stock format)
      return {
        id: primaryStock.id,
        drugId: newDrug.id,
        department: validatedData.department,
        totalQuantity: validatedData.initialQuantity,
        reservedQty: 0,
        minimumStock: validatedData.minimumStock,
        totalValue: initialTotalValue,
        lastUpdated: primaryStock.lastUpdated,
        drug: {
          id: newDrug.id,
          hospitalDrugCode: newDrug.hospitalDrugCode,
          name: newDrug.name,
          genericName: newDrug.genericName,
          dosageForm: newDrug.dosageForm,
          strength: newDrug.strength,
          unit: newDrug.unit,
          category: newDrug.category,
          pricePerBox: newDrug.pricePerBox,
          isActive: newDrug.isActive
        }
      };
    });

    console.log(`üéâ Successfully created drug and stock: ${result.drug.name}`);

    // ‚úÖ Fixed: Response format ‡∏ó‡∏µ‡πà modal ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    return NextResponse.json({
      success: true,
      data: result, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stock ‡∏û‡∏£‡πâ‡∏≠‡∏° drug info ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
      message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤ "${result.drug.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });

  } catch (error) {
    console.error("Create drug error:", error);

    // ‚úÖ Fixed: Type-safe error handling
    if (error instanceof ZodError) {
      console.log('‚ùå Validation error details:', error.issues);
      return NextResponse.json(
        {
          error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          details: error.issues
            .map((issue: ZodIssue) => `${issue.path.join(".")}: ${issue.message}`)
            .join(", "),
          validationErrors: error.issues // ‡∏™‡πà‡∏á validation errors ‡πÅ‡∏¢‡∏Å
        },
        { status: 400 }
      );
    }

    // Handle Prisma unique constraint errors
    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      if (error.code === "P2002") {
        // ‚úÖ Fixed: Type-safe meta target access
        const target = error.meta?.target;
        const field = Array.isArray(target) ? target[0] : undefined;
        let message = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß";

        if (field === "hospitalDrugCode") {
          message = "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß";
        } else if (field === "name") {
          message = "‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß";
        }

        return NextResponse.json({ error: message }, { status: 409 });
      }
    }

    // Generic error handling
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà" },
      { status: 500 }
    );
  }
}