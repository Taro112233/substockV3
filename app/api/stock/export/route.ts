// üìÑ File: app/api/stock/export/route.ts
// ‚úÖ FIXED: ‡πÅ‡∏Å‡πâ TypeScript errors ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö interface ‡πÅ‡∏•‡∏∞ type handling

import { NextRequest, NextResponse } from 'next/server'
import * as XLSX from 'xlsx'
import type { Department, Drug } from '@/types/index'

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á interface ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Date ‡πÅ‡∏•‡∏∞ string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lastUpdated
export interface ExportStock {
  id: string
  drugId: string
  department: Department
  totalQuantity: number
  reservedQty: number
  minimumStock: number
  totalValue: number
  lastUpdated: string | Date | null // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ Date
  drug: Drug
}

// Export request interface
interface ExportRequest {
  currentView: ExportStock[] // ‚úÖ ‡πÉ‡∏ä‡πâ ExportStock ‡πÅ‡∏ó‡∏ô StockWithDrug
  additionalStocks: string[]
  format: 'summary' | 'detailed'
  fields: {
    drugInfo: boolean
    stockLevels: boolean
    batchInfo: boolean
    costInfo: boolean
    lastUpdated: boolean
  }
  department: Department
  timestamp: string
  stats: {
    totalSelected: number
    currentViewCount: number
    additionalCount: number
    totalValue: number
  }
}

// Export row interface for Excel data
interface ExportRow {
  [key: string]: string | number | Date | null | undefined
}

// Category statistics interface
interface CategoryStats {
  [category: string]: {
    count: number
    value: number
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üìä Export API called')

    const body: ExportRequest = await request.json()
    console.log('üìã Export request:', {
      format: body.format,
      department: body.department,
      totalSelected: body.stats.totalSelected,
      currentViewCount: body.stats.currentViewCount
    })

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
    const exportStocks = collectExportData(body)
    
    if (exportStocks.length === 0) {
      console.log('‚ùå No data to export')
      return NextResponse.json(
        { success: false, error: 'No data to export' },
        { status: 400 }
      )
    }

    console.log(`üì¶ Processing ${exportStocks.length} stocks for export`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
    const workbook = createExcelWorkbook(exportStocks, body)
    
    // Convert ‡πÄ‡∏õ‡πá‡∏ô Buffer
    const buffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true 
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const departmentName = body.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    const filename = `‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤_${departmentName}_${timestamp}.xlsx`

    console.log(`‚úÖ Export successful: ${filename} (${buffer.length} bytes)`)

    // ‡∏™‡πà‡∏á Response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå Excel
    return new NextResponse(buffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
        'Content-Length': buffer.length.toString(),
        'Cache-Control': 'no-cache',
      }
    })

  } catch (error) {
    console.error('‚ùå Export error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Export failed' 
      },
      { status: 500 }
    )
  }
}

// ‚úÖ FIXED: ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Stock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
function collectExportData(body: ExportRequest): ExportStock[] {
  const allStocks: ExportStock[] = []

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Current View
  if (body.currentView && body.currentView.length > 0) {
    console.log(`üìã Adding ${body.currentView.length} stocks from current view`)
    allStocks.push(...body.currentView)
  }

  console.log(`üìä Total stocks for export: ${allStocks.length}`)
  return allStocks
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
function createExcelWorkbook(stocks: ExportStock[], config: ExportRequest): XLSX.WorkBook {
  const workbook = XLSX.utils.book_new()

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Main Sheet
  const mainData = stocks.map(stock => createExportRow(stock, config))
  const mainSheet = XLSX.utils.json_to_sheet(mainData)
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Column Width
  const columnWidths = getColumnWidths(config.format)
  mainSheet['!cols'] = columnWidths

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏•‡∏á‡πÉ‡∏ô Workbook
  const departmentName = config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  XLSX.utils.book_append_sheet(workbook, mainSheet, `‡∏™‡∏ï‡πá‡∏≠‡∏Å_${departmentName}`)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary Sheet (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô detailed format)
  if (config.format === 'detailed') {
    const summaryData = createSummaryData(stocks, config)
    const summarySheet = XLSX.utils.json_to_sheet(summaryData)
    XLSX.utils.book_append_sheet(workbook, summarySheet, '‡∏™‡∏£‡∏∏‡∏õ')
  }

  return workbook
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á date
function formatLastUpdated(lastUpdated: string | Date | null): string {
  if (!lastUpdated) return '-'
  
  const date = typeof lastUpdated === 'string' ? new Date(lastUpdated) : lastUpdated
  return date.toLocaleString('th-TH')
}

// ‚úÖ FIXED: ‡∏õ‡∏£‡∏±‡∏ö utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ExportStock
function calculateAvailableStockForExport(stock: ExportStock): number {
  return Math.max(0, (stock.totalQuantity || 0) - (stock.reservedQty || 0))
}

function isLowStockForExport(stock: ExportStock): boolean {
  const available = calculateAvailableStockForExport(stock)
  return available <= (stock.minimumStock || 0)
}

function getCategoryLabelForExport(category: string): string {
  const categoryMap: Record<string, string> = {
    'REFER': '‡∏¢‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠',
    'HAD': '‡∏¢‡∏≤ HAD',
    'NARCOTIC': '‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
    'REFRIGERATED': '‡∏¢‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏¢‡πá‡∏ô',
    'PSYCHIATRIC': '‡∏¢‡∏≤‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä',
    'FLUID': '‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠/‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥',
    'GENERAL': '‡∏¢‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    'TABLET': '‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î',
    'SYRUP': '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥',
    'INJECTION': '‡∏¢‡∏≤‡∏â‡∏µ‡∏î',
    'EXTEMP': '‡∏¢‡∏≤‡∏ú‡∏™‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß',
    'ALERT': '‡∏¢‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á'
  }
  return categoryMap[category] || category
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
function createExportRow(stock: ExportStock, config: ExportRequest): ExportRow {
  const availableStock = calculateAvailableStockForExport(stock)
  const lowStock = isLowStockForExport(stock)
  const categoryLabel = getCategoryLabelForExport(stock.drug?.category as string)
  const stockValue = availableStock * (stock.drug?.pricePerBox || 0)

  const row: ExportRow = {}

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠)
  row['‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤'] = stock.drug?.hospitalDrugCode || '-'
  row['‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤'] = stock.drug?.name || '-'
  row['‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠'] = availableStock
  row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = lowStock ? '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥' : '‡∏õ‡∏Å‡∏ï‡∏¥'

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ)
  if (config.fields.drugInfo) {
    row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç'] = stock.drug?.genericName || '-'
    row['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'] = categoryLabel
    row['‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'] = stock.drug?.dosageForm || '-'
    row['‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á'] = stock.drug?.strength ? `${stock.drug.strength} ${stock.drug.unit || ''}` : '-'
    row['‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏'] = stock.drug?.packageSize ? `1 x ${stock.drug.packageSize}'s` : '-'
  }

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ)
  if (config.fields.stockLevels) {
    row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥'] = stock.minimumStock || 0
    row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≠‡∏á'] = stock.reservedQty || 0
    row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°'] = stock.totalQuantity || 0
  }

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ)
  if (config.fields.costInfo) {
    row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á'] = stock.drug?.pricePerBox || 0
    row['‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°'] = stockValue
  }

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ)
  if (config.fields.lastUpdated) {
    row['‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'] = formatLastUpdated(stock.lastUpdated)
  }

  return row
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
function createSummaryData(stocks: ExportStock[], config: ExportRequest): ExportRow[] {
  const totalStocks = stocks.length
  const totalValue = stocks.reduce((sum, stock) => 
    sum + (calculateAvailableStockForExport(stock) * (stock.drug?.pricePerBox || 0)), 0
  )
  const lowStockCount = stocks.filter(stock => isLowStockForExport(stock)).length
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤
  const categoryStats: CategoryStats = stocks.reduce((acc, stock) => {
    const category = stock.drug?.category || 'UNKNOWN'
    if (!acc[category]) {
      acc[category] = { count: 0, value: 0 }
    }
    acc[category].count++
    acc[category].value += calculateAvailableStockForExport(stock) * (stock.drug?.pricePerBox || 0)
    return acc
  }, {} as CategoryStats)

  const summaryData: ExportRow[] = [
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': totalStocks,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': totalValue.toFixed(2),
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': lowStockCount,
      '‡πÅ‡∏ú‡∏ô‡∏Å': config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': new Date().toLocaleString('th-TH')
    },
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': '',
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    }, // Empty row
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': '',
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    },
    ...Object.entries(categoryStats).map(([category, categoryData]) => {
      return {
        '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getCategoryLabelForExport(category)}`,
        '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': categoryData.count,
        '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': categoryData.value.toFixed(2),
        '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
        '‡πÅ‡∏ú‡∏ô‡∏Å': '',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
      }
    })
  ]

  return summaryData
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
function getColumnWidths(format: 'summary' | 'detailed'): XLSX.ColInfo[] {
  const baseWidths: XLSX.ColInfo[] = [
    { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
    { wch: 30 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
    { wch: 12 }, // ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    { wch: 12 }, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  ]

  if (format === 'detailed') {
    return [
      ...baseWidths,
      { wch: 25 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç
      { wch: 15 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      { wch: 12 }, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      { wch: 15 }, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
      { wch: 15 }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏
      { wch: 12 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
      { wch: 10 }, // ‡∏à‡∏≠‡∏á
      { wch: 12 }, // ‡∏£‡∏ß‡∏°
      { wch: 12 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤
      { wch: 15 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
      { wch: 20 }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    ]
  }

  return baseWidths
}