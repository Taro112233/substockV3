// üìÑ File: app/api/stock/export/route.ts
// ‚úÖ UPDATED: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å format

import { NextRequest, NextResponse } from 'next/server'
import * as XLSX from 'xlsx'

interface StockData {
  id: string
  totalQuantity: number
  reservedQty: number
  minimumStock: number
  lastUpdated: string | null
  department: 'PHARMACY' | 'OPD'
  drug: {
    hospitalDrugCode: string | null
    name: string
    genericName: string | null
    category: string | null
    dosageForm: string | null
    strength: string | null
    unit: string | null
    packageSize: number | null
    pricePerBox: number | null
  } | null
}

interface ExportRequest {
  currentView: StockData[]
  additionalStocks: string[]
  format: 'summary' | 'detailed' | 'requisition'
  fields: {
    drugInfo: boolean
    stockLevels: boolean
    batchInfo: boolean
    costInfo: boolean
    lastUpdated: boolean
  }
  department: 'PHARMACY' | 'OPD'
  timestamp: string
  stats: {
    totalSelected: number
    currentViewCount: number
    additionalCount: number
    totalValue: number
  }
}

interface ExportRow {
  [key: string]: string | number | undefined
}

// ‚úÖ LOCAL: Calculate available stock
function calculateAvailableStockLocal(stock: StockData): number {
  return Math.max(0, (stock.totalQuantity || 0) - (stock.reservedQty || 0))
}

// ‚úÖ LOCAL: Check if stock is low
function isLowStockLocal(stock: StockData): boolean {
  const available = calculateAvailableStockLocal(stock)
  const minimum = stock.minimumStock || 0
  return available < minimum && minimum > 0
}

// ‚úÖ LOCAL: Get category label
function getCategoryLabelLocal(category: string | null | undefined): string {
  if (!category) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  
  const labels: Record<string, string> = {
    'REFER': '‡∏¢‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠',
    'HAD': '‡∏¢‡∏≤ HAD',
    'NARCOTIC': '‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
    'REFRIGERATED': '‡∏¢‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏¢‡πá‡∏ô',
    'PSYCHIATRIC': '‡∏¢‡∏≤‡∏à‡∏¥‡∏ï',
    'FLUID': '‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡πá‡∏≠',
    'GENERAL': '‡∏¢‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    'TABLET': '‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î',
    'SYRUP': '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥',
    'INJECTION': '‡∏¢‡∏≤‡∏â‡∏µ‡∏î',
    'EXTEMP': '‡∏¢‡∏≤‡∏ú‡∏™‡∏°',
    'ALERT': '‡∏¢‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'
  }
  
  return labels[category] || category
}

// ‚úÖ NEW: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
function calculatePricePerUnit(pricePerBox: number | null | undefined, packageSize: number | null | undefined): number {
  if (!pricePerBox || !packageSize || packageSize === 0) return 0
  return pricePerBox / packageSize
}

// ‚úÖ NEW: Sort stocks by drug name A-Z (Thai locale support)
function sortStocksByName(stocks: StockData[]): StockData[] {
  return [...stocks].sort((a, b) => {
    const nameA = a.drug?.name?.toLowerCase() || ''
    const nameB = b.drug?.name?.toLowerCase() || ''
    
    // ‡πÉ‡∏ä‡πâ Thai locale sorting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return nameA.localeCompare(nameB, 'th', {
      sensitivity: 'base',
      numeric: true,
      ignorePunctuation: true
    })
  })
}

export async function POST(request: NextRequest) {
  try {
    console.log('üìä Stock Export API called')

    const body: ExportRequest = await request.json()
    console.log('üìã Export request:', {
      format: body.format,
      department: body.department,
      totalSelected: body.stats.totalSelected,
      currentViewCount: body.stats.currentViewCount
    })

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
    const exportStocks = collectExportData(body)
    
    if (exportStocks.length === 0) {
      console.log('‚ùå No data to export')
      return NextResponse.json(
        { success: false, error: 'No data to export' },
        { status: 400 }
      )
    }

    console.log(`üì¶ Processing ${exportStocks.length} stocks for export`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
    const workbook = createExcelWorkbook(exportStocks, body)
    
    // Convert ‡πÄ‡∏õ‡πá‡∏ô Buffer
    const buffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true 
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const departmentName = body.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    const formatName = body.format === 'requisition' ? '‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å' : 
                      body.format === 'detailed' ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏™‡∏£‡∏∏‡∏õ'
    const filename = `‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤_${departmentName}_${formatName}_${timestamp}.xlsx`

    console.log(`‚úÖ Export successful: ${filename} (${buffer.length} bytes)`)

    // ‡∏™‡πà‡∏á Response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå Excel
    return new NextResponse(buffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
        'Content-Length': buffer.length.toString(),
        'Cache-Control': 'no-cache',
      }
    })

  } catch (error) {
    console.error('‚ùå Export error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Export failed' 
      },
      { status: 500 }
    )
  }
}

// ‚úÖ UPDATED: ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Stock ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ A-Z
function collectExportData(body: ExportRequest): StockData[] {
  const allStocks: StockData[] = []

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Current View
  if (body.currentView && body.currentView.length > 0) {
    console.log(`üìã Adding ${body.currentView.length} stocks from current view`)
    allStocks.push(...body.currentView)
  }

  console.log(`üìä Total stocks before sorting: ${allStocks.length}`)
  
  // ‚úÖ NEW: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ A-Z ‡∏Å‡πà‡∏≠‡∏ô return
  const sortedStocks = sortStocksByName(allStocks)
  console.log(`üìä Stocks sorted by drug name A-Z: ${sortedStocks.length}`)

  return sortedStocks
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
function createExcelWorkbook(stocks: StockData[], config: ExportRequest): XLSX.WorkBook {
  const workbook = XLSX.utils.book_new()

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Main Sheet
  const mainData = stocks.map(stock => createExportRow(stock, config))
  const mainSheet = XLSX.utils.json_to_sheet(mainData)
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Column Width
  const columnWidths = getColumnWidths(config.format)
  mainSheet['!cols'] = columnWidths

  // ‚úÖ NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏° Cell Formatting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
  if (config.format === 'requisition') {
    applyCellFormatting(mainSheet, mainData)
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏•‡∏á‡πÉ‡∏ô Workbook
  const departmentName = config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  XLSX.utils.book_append_sheet(workbook, mainSheet, `‡∏™‡∏ï‡πá‡∏≠‡∏Å_${departmentName}`)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary Sheet (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô detailed format)
  if (config.format === 'detailed') {
    const summaryData = createSummaryData(stocks, config)
    const summarySheet = XLSX.utils.json_to_sheet(summaryData)
    XLSX.utils.book_append_sheet(workbook, summarySheet, '‡∏™‡∏£‡∏∏‡∏õ')
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Header Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å
  if (config.format === 'requisition') {
    const headerData = createRequisitionHeader(config)
    const headerSheet = XLSX.utils.json_to_sheet(headerData)
    XLSX.utils.book_append_sheet(workbook, headerSheet, '‡∏´‡∏±‡∏ß‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å')
  }

  return workbook
}

// ‚úÖ UPDATED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
function createExportRow(stock: StockData, config: ExportRequest): ExportRow {
  const availableStock = calculateAvailableStockLocal(stock)
  const lowStock = isLowStockLocal(stock)
  const categoryLabel = getCategoryLabelLocal(stock.drug?.category)
  const stockValue = availableStock * (stock.drug?.pricePerBox || 0)
  const pricePerBox = stock.drug?.pricePerBox || 0
  const pricePerUnit = calculatePricePerUnit(stock.drug?.pricePerBox, stock.drug?.packageSize)

  // ‚úÖ UPDATED: ‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å Format - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
  if (config.format === 'requisition') {
    return {
      '‡∏£‡∏´‡∏±‡∏™': stock.drug?.hospitalDrugCode || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': stock.drug?.name || '-',
      '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö': stock.drug?.dosageForm || '-',
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á': stock.drug?.strength && stock.drug?.unit 
        ? `${stock.drug.strength} ${stock.drug.unit}` 
        : (stock.drug?.strength || '-'),
      '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏': stock.drug?.packageSize ? `1 x ${stock.drug.packageSize}'s` : '-',
      '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á': pricePerBox, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô number
      '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢': pricePerUnit, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô number
      '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥': stock.minimumStock || 0,
      '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': availableStock,
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lowStock ? '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ö‡∏¥‡∏Å' : '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
      '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï': stock.lastUpdated 
        ? new Date(stock.lastUpdated).toLocaleString('th-TH', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          })
        : '-'
    }
  }

  // ‚úÖ FIXED: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Summary Format
  if (config.format === 'summary') {
    return {
      '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': stock.drug?.hospitalDrugCode || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': stock.drug?.name || '-',
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': categoryLabel,
      '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö': stock.drug?.dosageForm || '-',
      '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': availableStock,
      '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥': stock.minimumStock || 0,
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lowStock ? '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥' : '‡∏õ‡∏Å‡∏ï‡∏¥',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏ö‡∏≤‡∏ó)': stockValue.toFixed(2),
      '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î': stock.lastUpdated 
        ? new Date(stock.lastUpdated).toLocaleString('th-TH')
        : '-'
    }
  }

  // ‚úÖ FIXED: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Detailed Format
  if (config.format === 'detailed') {
    const row: ExportRow = {
      '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': stock.drug?.hospitalDrugCode || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': stock.drug?.name || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç': stock.drug?.genericName || '-',
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': categoryLabel,
      '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö': stock.drug?.dosageForm || '-',
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á': stock.drug?.strength ? `${stock.drug.strength} ${stock.drug.unit || ''}` : '-',
      '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏': stock.drug?.packageSize ? `1 x ${stock.drug.packageSize}'s` : '-',
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°': stock.totalQuantity || 0,
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≠‡∏á': stock.reservedQty || 0,
      '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': availableStock,
      '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥': stock.minimumStock || 0,
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lowStock ? '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥' : '‡∏õ‡∏Å‡∏ï‡∏¥',
      '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á': stock.drug?.pricePerBox || 0,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': stockValue.toFixed(2),
      '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î': stock.lastUpdated 
        ? new Date(stock.lastUpdated).toLocaleString('th-TH')
        : '-'
    }

    return row
  }

  // Fallback (shouldn't reach here)
  return {
    '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': stock.drug?.hospitalDrugCode || '-',
    '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': stock.drug?.name || '-',
    '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': availableStock,
    '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': lowStock ? '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥' : '‡∏õ‡∏Å‡∏ï‡∏¥'
  }
}

// ‚úÖ UPDATED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ - Summary data ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
function createSummaryData(stocks: StockData[], config: ExportRequest): ExportRow[] {
  const totalStocks = stocks.length
  const totalValue = stocks.reduce((sum, stock) => 
    sum + (calculateAvailableStockLocal(stock) * (stock.drug?.pricePerBox || 0)), 0
  )
  const lowStockCount = stocks.filter(stock => isLowStockLocal(stock)).length
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤ - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const categoryStats = stocks.reduce((acc, stock) => {
    const category = stock.drug?.category || 'UNKNOWN'
    if (!acc[category]) {
      acc[category] = { count: 0, value: 0 }
    }
    acc[category].count++
    acc[category].value += calculateAvailableStockLocal(stock) * (stock.drug?.pricePerBox || 0)
    return acc
  }, {} as Record<string, { count: number, value: number }>)

  const summaryData: ExportRow[] = [
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': totalStocks,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': totalValue.toFixed(2),
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': lowStockCount,
      '‡πÅ‡∏ú‡∏ô‡∏Å': config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': new Date().toLocaleString('th-TH')
    },
    {}, // Empty row
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': '',
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    },
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    ...Object.entries(categoryStats)
      .sort(([a], [b]) => getCategoryLabelLocal(a).localeCompare(getCategoryLabelLocal(b), 'th'))
      .map(([category, categoryData]) => {
        const data = categoryData as { count: number, value: number }
        return {
          '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getCategoryLabelLocal(category)}`,
          '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': data.count,
          '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': data.value.toFixed(2),
          '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
          '‡πÅ‡∏ú‡∏ô‡∏Å': '',
          '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
        }
      })
  ]

  return summaryData
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å
function createRequisitionHeader(config: ExportRequest): Array<Record<string, string | number>> {
  const departmentName = config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  const currentDate = new Date().toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })

  return [
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏¢‡∏≤',
      '‡∏Ñ‡πà‡∏≤': `${departmentName} - ${currentDate}`
    },
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
      '‡∏Ñ‡πà‡∏≤': `${config.stats.totalSelected} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    },
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°',
      '‡∏Ñ‡πà‡∏≤': `‡∏ø${config.stats.totalValue.toLocaleString()}`
    },
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export',
      '‡∏Ñ‡πà‡∏≤': new Date().toLocaleString('th-TH')
    },
    {},
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:',
      '‡∏Ñ‡πà‡∏≤': '‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ A-Z)'
    },
    {
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•': '',
      '‡∏Ñ‡πà‡∏≤': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ö‡∏¥‡∏Å = ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥'
    }
  ]
}

// ‚úÖ NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Format Cell ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
function applyCellFormatting(worksheet: XLSX.WorkSheet, data: ExportRow[]) {
  if (!data.length) return

  const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1')
  
  // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 6 ‡πÅ‡∏•‡∏∞ 7 = F ‡πÅ‡∏•‡∏∞ G)
  const pricePerBoxCol = 5 // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á)
  const pricePerUnitCol = 6 // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢)
  const minimumCol = 7 // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå H (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)
  const availableCol = 8 // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå I (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)

  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header)
  for (let row = 1; row <= range.e.r; row++) {
    // Format ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á (2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°, ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
    const priceBoxCellRef = XLSX.utils.encode_cell({ r: row, c: pricePerBoxCol })
    if (worksheet[priceBoxCellRef]) {
      worksheet[priceBoxCellRef].z = '#,##0.00' // Number format with 2 decimal places
      if (!worksheet[priceBoxCellRef].s) worksheet[priceBoxCellRef].s = {}
      worksheet[priceBoxCellRef].s.alignment = { horizontal: 'right' }
    }

    // Format ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (4 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°, ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
    const priceUnitCellRef = XLSX.utils.encode_cell({ r: row, c: pricePerUnitCol })
    if (worksheet[priceUnitCellRef]) {
      worksheet[priceUnitCellRef].z = '#,##0.0000' // Number format with 4 decimal places
      if (!worksheet[priceUnitCellRef].s) worksheet[priceUnitCellRef].s = {}
      worksheet[priceUnitCellRef].s.alignment = { horizontal: 'right' }
    }

    // Format ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
    const minCellRef = XLSX.utils.encode_cell({ r: row, c: minimumCol })
    if (worksheet[minCellRef]) {
      worksheet[minCellRef].z = '#,##0' // Integer format
      if (!worksheet[minCellRef].s) worksheet[minCellRef].s = {}
      worksheet[minCellRef].s.alignment = { horizontal: 'right' }
    }

    // Format ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤)
    const availCellRef = XLSX.utils.encode_cell({ r: row, c: availableCol })
    if (worksheet[availCellRef]) {
      worksheet[availCellRef].z = '#,##0' // Integer format
      if (!worksheet[availCellRef].s) worksheet[availCellRef].s = {}
      worksheet[availCellRef].s.alignment = { horizontal: 'right' }
    }
  }
}

// ‚úÖ UPDATED: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏° format - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
function getColumnWidths(format: 'summary' | 'detailed' | 'requisition'): XLSX.ColInfo[] {
  // ‚úÖ UPDATED: ‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å Format - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
  if (format === 'requisition') {
    return [
      { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™
      { wch: 30 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      { wch: 12 }, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      { wch: 15 }, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
      { wch: 15 }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏
      { wch: 12 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á
      { wch: 14 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
      { wch: 10 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
      { wch: 12 }, // ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      { wch: 12 }, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      { wch: 18 }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    ]
  }

  // Summary Format
  if (format === 'summary') {
    return [
      { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
      { wch: 30 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      { wch: 15 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      { wch: 12 }, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      { wch: 12 }, // ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      { wch: 10 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
      { wch: 12 }, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      { wch: 15 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
      { wch: 20 }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    ]
  }

  // Detailed Format
  return [
    { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
    { wch: 30 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
    { wch: 25 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç
    { wch: 15 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    { wch: 12 }, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    { wch: 15 }, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
    { wch: 15 }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏
    { wch: 10 }, // ‡∏£‡∏ß‡∏°
    { wch: 10 }, // ‡∏à‡∏≠‡∏á
    { wch: 12 }, // ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    { wch: 10 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    { wch: 12 }, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    { wch: 12 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤
    { wch: 15 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
    { wch: 20 }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  ]
}