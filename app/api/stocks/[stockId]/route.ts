// üìÑ File: app/api/stocks/[stockId]/route.ts
// ===== ENHANCED STOCK API WITH MINIMUM STOCK SUPPORT =====

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { verifyToken } from '@/lib/auth'
import { z } from 'zod'
import { TransactionType } from '@/types'

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
const updateStockSchema = z.object({
  totalQuantity: z.number().min(0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'),
  minimumStock: z.number().min(0, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'),
  adjustmentReason: z.string().min(1, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•'),
  department: z.enum(['PHARMACY', 'OPD'])
})

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î TransactionType ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
const determineTransactionType = (
  quantityChange: number,
  minimumStockChange: number,
  reason: string
): TransactionType => {
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
  if (quantityChange !== 0) {
    if (quantityChange > 0) return 'ADJUST_INCREASE' as TransactionType
    if (quantityChange < 0) return 'ADJUST_DECREASE' as TransactionType
  }
  
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô minimum stock ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (quantityChange === 0 && minimumStockChange !== 0) {
    if (minimumStockChange > 0) return 'MIN_STOCK_INCREASE' as TransactionType
    if (minimumStockChange < 0) return 'MIN_STOCK_DECREASE' as TransactionType
  }
  
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
  return 'DATA_UPDATE' as TransactionType
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const generateAdjustmentReason = (
  currentQty: number, 
  newQty: number, 
  currentMin: number, 
  newMin: number
): string => {
  const qtyChange = newQty - currentQty
  const minChange = newMin - currentMin

  if (qtyChange === 0) {
    if (minChange === 0) return '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    if (minChange > 0) return '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥'
    if (minChange < 0) return '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥'
  }
  
  if (qtyChange > 0) return '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å'
  if (qtyChange < 0) return '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å'

  return '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
}

interface RouteContext {
  params: Promise<{ stockId: string }>
}

export async function GET(request: NextRequest, context: RouteContext) {
  try {
    const { stockId } = await context.params

    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 401 })
    }

    const decoded = await verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 401 })
    }

    const stock = await prisma.stock.findUnique({
      where: { id: stockId },
      include: {
        drug: {
          select: {
            hospitalDrugCode: true,
            name: true,
            genericName: true,
            dosageForm: true,
            strength: true,
            unit: true,
            packageSize: true,
            category: true,
            pricePerBox: true,
            notes: true
          }
        },
        transactions: {
          orderBy: { createdAt: 'desc' },
          take: 10,
          include: {
            user: {
              select: { 
                firstName: true,
                lastName: true 
              }
            }
          }
        }
      }
    })

    if (!stock) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' }, { status: 404 })
    }

    return NextResponse.json({
      success: true,
      data: stock
    })

  } catch (error: any) {
    console.error('Get stock error:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' },
      { status: 500 }
    )
  }
}

// ‚≠ê ENHANCED PATCH - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° Minimum Stock Fields
export async function PATCH(request: NextRequest, context: RouteContext) {
  try {
    const { stockId } = await context.params

    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 401 })
    }

    const decoded = await verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 401 })
    }

    const body = await request.json()

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const currentStock = await prisma.stock.findUnique({
      where: { id: stockId },
      include: { drug: true }
    })

    if (!currentStock) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' }, { status: 404 })
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!body.adjustmentReason || !body.adjustmentReason.trim()) {
      body.adjustmentReason = generateAdjustmentReason(
        currentStock.totalQuantity,
        body.totalQuantity || currentStock.totalQuantity,
        currentStock.minimumStock,
        body.minimumStock || currentStock.minimumStock
      )
    }

    const validatedData = updateStockSchema.parse(body)
    const { totalQuantity, minimumStock, adjustmentReason, department } = validatedData

    if (currentStock.department !== department) {
      return NextResponse.json({ error: '‡πÅ‡∏ú‡∏ô‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 400 })
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    const quantityChange = totalQuantity - currentStock.totalQuantity
    const minimumStockChange = minimumStock - currentStock.minimumStock

    const result = await prisma.$transaction(async (tx) => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å
      const updatedStock = await tx.stock.update({
        where: { id: stockId },
        data: {
          totalQuantity,
          minimumStock,
          lastUpdated: new Date(),
          ...(quantityChange !== 0 && {
            totalValue: (currentStock.totalValue / Math.max(currentStock.totalQuantity, 1)) * totalQuantity
          })
        },
        include: {
          drug: {
            select: {
              hospitalDrugCode: true,
              name: true,
              genericName: true,
              dosageForm: true,
              strength: true,
              unit: true,
              packageSize: true,
              category: true,
              pricePerBox: true,
              notes: true
            }
          }
        }
      })

      // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction Records ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      
      // 1Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á -> ‡∏™‡∏£‡πâ‡∏≤‡∏á Stock Transaction
      if (quantityChange !== 0) {
        const stockTransactionType: TransactionType = quantityChange > 0 ? 'ADJUST_INCREASE' : 'ADJUST_DECREASE'
        
        await tx.stockTransaction.create({
          data: {
            stockId: currentStock.id,
            userId: decoded.userId,
            type: stockTransactionType,
            // üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
            quantity: quantityChange,
            beforeQty: currentStock.totalQuantity,
            afterQty: totalQuantity,
            // üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ)
            minStockChange: 0,
            beforeMinStock: currentStock.minimumStock,
            afterMinStock: currentStock.minimumStock, // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            // üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
            unitCost: currentStock.totalValue / Math.max(currentStock.totalQuantity, 1),
            totalCost: Math.abs(quantityChange) * (currentStock.totalValue / Math.max(currentStock.totalQuantity, 1)),
            reference: `STOCK_ADJ_${Date.now()}`,
            note: `${adjustmentReason} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ${currentStock.totalQuantity} ‡πÄ‡∏õ‡πá‡∏ô ${totalQuantity}`
          }
        })
      }

      // 2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ -> ‡∏™‡∏£‡πâ‡∏≤‡∏á Minimum Stock Transaction
      if (minimumStockChange !== 0) {
        const minStockTransactionType: TransactionType = minimumStockChange > 0 ? 'MIN_STOCK_INCREASE' : 'MIN_STOCK_DECREASE'
        
        await tx.stockTransaction.create({
          data: {
            stockId: currentStock.id,
            userId: decoded.userId,
            type: minStockTransactionType,
            // üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
            quantity: 0, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
            beforeQty: totalQuantity, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            afterQty: totalQuantity, // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            // üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            minStockChange: minimumStockChange,
            beforeMinStock: currentStock.minimumStock,
            afterMinStock: minimumStock,
            // üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ cost ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)
            unitCost: 0,
            totalCost: 0,
            reference: `MIN_STOCK_ADJ_${Date.now()}`,
            note: `${adjustmentReason} | ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏à‡∏≤‡∏Å ${currentStock.minimumStock} ‡πÄ‡∏õ‡πá‡∏ô ${minimumStock}`
          }
        })
      }

      // 3Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∞‡πÑ‡∏£ -> ‡∏™‡∏£‡πâ‡∏≤‡∏á Data Update Transaction
      if (quantityChange === 0 && minimumStockChange === 0) {
        await tx.stockTransaction.create({
          data: {
            stockId: currentStock.id,
            userId: decoded.userId,
            type: 'DATA_UPDATE',
            quantity: 0,
            beforeQty: currentStock.totalQuantity,
            afterQty: currentStock.totalQuantity,
            minStockChange: 0,
            beforeMinStock: currentStock.minimumStock,
            afterMinStock: currentStock.minimumStock,
            unitCost: 0,
            totalCost: 0,
            reference: `DATA_UPDATE_${Date.now()}`,
            note: adjustmentReason
          }
        })
      }

      return updatedStock
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const changes = []
    if (quantityChange !== 0) {
      changes.push(`‡∏™‡∏ï‡πá‡∏≠‡∏Å: ${currentStock.totalQuantity} ‚Üí ${totalQuantity}`)
    }
    if (minimumStockChange !== 0) {
      changes.push(`‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: ${currentStock.minimumStock} ‚Üí ${minimumStock}`)
    }

    const message = changes.length > 0 
      ? `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${changes.join(', ')})`
      : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'

    return NextResponse.json({
      success: true,
      message,
      data: {
        ...result,
        lastUpdated: result.lastUpdated.toISOString()
      },
      transactionInfo: {
        quantityChanged: quantityChange !== 0,
        quantityChange,
        minimumStockChanged: minimumStockChange !== 0,
        minimumStockChange,
        reason: adjustmentReason,
        transactionsCreated: [
          ...(quantityChange !== 0 ? ['STOCK_ADJUSTMENT'] : []),
          ...(minimumStockChange !== 0 ? ['MIN_STOCK_ADJUSTMENT'] : []),
          ...(quantityChange === 0 && minimumStockChange === 0 ? ['DATA_UPDATE'] : [])
        ]
      }
    })

  } catch (error: any) {
    console.error('Update stock error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          details: error.issues.map((issue) => issue.message).join(', ')
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' },
      { status: 500 }
    )
  }
}

export async function DELETE(request: NextRequest, context: RouteContext) {
  try {
    const { stockId } = await context.params

    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 401 })
    }

    const decoded = await verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 401 })
    }

    const existingStock = await prisma.stock.findUnique({
      where: { id: stockId },
      include: { 
        drug: { select: { name: true } },
        transactions: { take: 1 }
      }
    })

    if (!existingStock) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' }, { status: 404 })
    }

    if (existingStock.transactions.length > 0) {
      return NextResponse.json({ 
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡πâ‡∏ß' 
      }, { status: 400 })
    }

    await prisma.stock.delete({
      where: { id: stockId }
    })

    return NextResponse.json({
      success: true,
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏¢‡∏≤ "${existingStock.drug.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    })

  } catch (error: any) {
    console.error('Delete stock error:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å' },
      { status: 500 }
    )
  }
}