// üìÑ File: app/api/transactions/export/route.ts
// ‚úÖ NEW: Transaction Export API Route

import { NextRequest, NextResponse } from 'next/server'
import * as XLSX from 'xlsx'

interface TransactionData {
  id: string
  type: string
  quantity: number
  beforeQty: number
  afterQty: number
  beforeMinStock?: number | null
  afterMinStock?: number | null
  minStockChange?: number | null
  note: string | null
  reference: string | null
  batchNumber: string | null
  createdAt: string
  user: {
    firstName: string
    lastName: string
  }
  drug: {
    hospitalDrugCode: string | null
    name: string
    genericName: string | null
    category: string | null
    dosageForm: string | null
    strength: string | null
    unit: string | null
    packageSize: number | null
    pricePerBox: number | null
  } | null
}

interface TransactionExportRequest {
  currentView: TransactionData[]
  additionalTransactions: string[]
  format: 'summary' | 'detailed' | 'financial'
  department: 'PHARMACY' | 'OPD'
  timestamp: string
  stats: {
    totalSelected: number
    currentViewCount: number
    additionalCount: number
    totalValue: number
  }
}

interface ExportRow {
  [key: string]: string | number | undefined
}

// Transaction Type Labels
function getTransactionTypeLabel(type: string): string {
  const labels: Record<string, string> = {
    'RECEIVE_EXTERNAL': '‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å',
    'DISPENSE_EXTERNAL': '‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
    'TRANSFER_IN': '‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∑‡πà‡∏ô',
    'TRANSFER_OUT': '‡∏™‡πà‡∏á‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∑‡πà‡∏ô',
    'ADJUST_INCREASE': '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å',
    'ADJUST_DECREASE': '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å',
    'RESERVE': '‡∏à‡∏≠‡∏á‡∏¢‡∏≤',
    'UNRESERVE': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡∏≠‡∏á',
    'MIN_STOCK_INCREASE': '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥',
    'MIN_STOCK_DECREASE': '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥',
    'MIN_STOCK_RESET': '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏´‡∏°‡πà',
    'DATA_UPDATE': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    'PRICE_UPDATE': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤',
    'INFO_CORRECTION': '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
  }
  return labels[type] || type
}

// Category Labels
function getCategoryLabelLocal(category: string | null | undefined): string {
  if (!category) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  
  const labels: Record<string, string> = {
    'REFER': '‡∏¢‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠',
    'HAD': '‡∏¢‡∏≤ HAD',
    'NARCOTIC': '‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
    'REFRIGERATED': '‡∏¢‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏¢‡πá‡∏ô',
    'PSYCHIATRIC': '‡∏¢‡∏≤‡∏à‡∏¥‡∏ï',
    'FLUID': '‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡πá‡∏≠',
    'GENERAL': '‡∏¢‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    'TABLET': '‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î',
    'SYRUP': '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥',
    'INJECTION': '‡∏¢‡∏≤‡∏â‡∏µ‡∏î',
    'EXTEMP': '‡∏¢‡∏≤‡∏ú‡∏™‡∏°',
    'ALERT': '‡∏¢‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
    'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ'
  }
  
  return labels[category] || category
}

// Calculate transaction cost
function calculateTransactionCost(transaction: TransactionData): number {
  const price = transaction.drug?.pricePerBox || 0
  const absQuantity = Math.abs(transaction.quantity)
  return price * absQuantity
}

// Format transaction amount
function formatTransactionAmount(type: string, quantity: number): {
  value: number
  formatted: string
  className: string
} {
  const isIncoming = [
    'RECEIVE_EXTERNAL', 'ADJUST_INCREASE', 'TRANSFER_IN', 'UNRESERVE'
  ].includes(type)
  
  const isOutgoing = [
    'DISPENSE_EXTERNAL', 'ADJUST_DECREASE', 'TRANSFER_OUT', 'RESERVE'
  ].includes(type)

  if (isIncoming) {
    return {
      value: Math.abs(quantity),
      formatted: `+${Math.abs(quantity).toLocaleString()}`,
      className: 'text-green-600'
    }
  } else if (isOutgoing) {
    return {
      value: Math.abs(quantity),
      formatted: `-${Math.abs(quantity).toLocaleString()}`,
      className: 'text-red-600'
    }
  } else {
    return {
      value: quantity,
      formatted: quantity.toLocaleString(),
      className: 'text-gray-600'
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üìä Transaction Export API called')

    const body: TransactionExportRequest = await request.json()
    console.log('üìã Export request:', {
      format: body.format,
      department: body.department,
      totalSelected: body.stats.totalSelected,
      currentViewCount: body.stats.currentViewCount
    })

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
    const exportTransactions = collectExportData(body)
    
    if (exportTransactions.length === 0) {
      console.log('‚ùå No data to export')
      return NextResponse.json(
        { success: false, error: 'No data to export' },
        { status: 400 }
      )
    }

    console.log(`üì¶ Processing ${exportTransactions.length} transactions for export`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
    const workbook = createExcelWorkbook(exportTransactions, body)
    
    // Convert ‡πÄ‡∏õ‡πá‡∏ô Buffer
    const buffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true 
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const departmentName = body.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    const formatName = body.format === 'financial' ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' : 
                      body.format === 'detailed' ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏™‡∏£‡∏∏‡∏õ'
    const filename = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß_${departmentName}_${formatName}_${timestamp}.xlsx`

    console.log(`‚úÖ Export successful: ${filename} (${buffer.length} bytes)`)

    // ‡∏™‡πà‡∏á Response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå Excel
    return new NextResponse(buffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(filename)}`,
        'Content-Length': buffer.length.toString(),
        'Cache-Control': 'no-cache',
      }
    })

  } catch (error) {
    console.error('‚ùå Transaction Export error:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Export failed' 
      },
      { status: 500 }
    )
  }
}

// ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
function collectExportData(body: TransactionExportRequest): TransactionData[] {
  const allTransactions: TransactionData[] = []

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Current View
  if (body.currentView && body.currentView.length > 0) {
    console.log(`üìã Adding ${body.currentView.length} transactions from current view`)
    allTransactions.push(...body.currentView)
  }

  console.log(`üìä Total transactions for export: ${allTransactions.length}`)
  return allTransactions
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel Workbook
function createExcelWorkbook(transactions: TransactionData[], config: TransactionExportRequest): XLSX.WorkBook {
  const workbook = XLSX.utils.book_new()

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Main Sheet
  const mainData = transactions.map(transaction => createTransactionExportRow(transaction, config))
  const mainSheet = XLSX.utils.json_to_sheet(mainData)
  
  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Column Width
  const columnWidths = getTransactionColumnWidths(config.format)
  mainSheet['!cols'] = columnWidths

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏•‡∏á‡πÉ‡∏ô Workbook
  const departmentName = config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  const formatName = config.format === 'financial' ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' : 
                    config.format === 'detailed' ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏™‡∏£‡∏∏‡∏õ'
  XLSX.utils.book_append_sheet(workbook, mainSheet, `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥_${departmentName}_${formatName}`)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary Sheet (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô financial ‡∏´‡∏£‡∏∑‡∏≠ detailed format)
  if (config.format === 'financial' || config.format === 'detailed') {
    const summaryData = createTransactionSummaryData(transactions, config)
    const summarySheet = XLSX.utils.json_to_sheet(summaryData)
    XLSX.utils.book_append_sheet(workbook, summarySheet, '‡∏™‡∏£‡∏∏‡∏õ')
  }

  return workbook
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transaction Export
function createTransactionExportRow(transaction: TransactionData, config: TransactionExportRequest): ExportRow {
  const transactionCost = calculateTransactionCost(transaction)
  const amountData = formatTransactionAmount(transaction.type, transaction.quantity)
  const typeLabel = getTransactionTypeLabel(transaction.type)
  const categoryLabel = getCategoryLabelLocal(transaction.drug?.category)

  // Summary Format
  if (config.format === 'summary') {
    return {
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': new Date(transaction.createdAt).toLocaleDateString('th-TH', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      }),
      '‡πÄ‡∏ß‡∏•‡∏≤': new Date(transaction.createdAt).toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit'
      }),
      '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': transaction.drug?.hospitalDrugCode || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': transaction.drug?.name || '-',
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': typeLabel,
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': amountData.formatted,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤': transactionCost > 0 ? `‡∏ø${transactionCost.toLocaleString()}` : '-',
      '‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': `${transaction.user.firstName} ${transaction.user.lastName}`
    }
  }

  // Financial Format
  if (config.format === 'financial') {
    const isIncoming = ['RECEIVE_EXTERNAL', 'ADJUST_INCREASE', 'TRANSFER_IN', 'UNRESERVE'].includes(transaction.type)
    const isOutgoing = ['DISPENSE_EXTERNAL', 'ADJUST_DECREASE', 'TRANSFER_OUT', 'RESERVE'].includes(transaction.type)
    
    return {
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': new Date(transaction.createdAt).toLocaleDateString('th-TH'),
      '‡πÄ‡∏ß‡∏•‡∏≤': new Date(transaction.createdAt).toLocaleTimeString('th-TH'),
      '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': transaction.drug?.hospitalDrugCode || '-',
      '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': transaction.drug?.name || '-',
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤': categoryLabel,
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°': typeLabel,
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': Math.abs(transaction.quantity),
      '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢': transaction.drug?.pricePerBox || 0,
      '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤': isIncoming ? transactionCost : 0,
      '‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å': isOutgoing ? transactionCost : 0,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': isIncoming ? transactionCost : (isOutgoing ? -transactionCost : 0),
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô': transaction.beforeQty || 0,
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á': transaction.afterQty || 0,
      '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': transaction.note || '',
      '‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á': transaction.reference || '',
      '‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': `${transaction.user.firstName} ${transaction.user.lastName}`,
      '‡πÅ‡∏ú‡∏ô‡∏Å': config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
    }
  }

  // Detailed Format (default)
  return {
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': new Date(transaction.createdAt).toLocaleDateString('th-TH'),
    '‡πÄ‡∏ß‡∏•‡∏≤': new Date(transaction.createdAt).toLocaleTimeString('th-TH'),
    '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤': transaction.drug?.hospitalDrugCode || '-',
    '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤': transaction.drug?.name || '-',
    '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç': transaction.drug?.genericName || '-',
    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤': categoryLabel,
    '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö': transaction.drug?.dosageForm || '-',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á': transaction.drug?.strength && transaction.drug?.unit 
      ? `${transaction.drug.strength} ${transaction.drug.unit}` 
      : (transaction.drug?.strength || '-'),
    '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏': transaction.drug?.packageSize ? `1 x ${transaction.drug.packageSize}'s` : '-',
    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°': typeLabel,
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': transaction.quantity,
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': amountData.formatted,
    '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô': transaction.beforeQty || 0,
    '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á': transaction.afterQty || 0,
    '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô': transaction.beforeMinStock ?? '-',
    '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏´‡∏•‡∏±‡∏á': transaction.afterMinStock ?? '-',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢': transaction.drug?.pricePerBox || 0,
    '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': transactionCost,
    '‡πÅ‡∏ö‡∏ó‡∏ä‡πå': transaction.batchNumber || '-',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏': transaction.note || '',
    '‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á': transaction.reference || '',
    '‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': `${transaction.user.firstName} ${transaction.user.lastName}`,
    '‡πÅ‡∏ú‡∏ô‡∏Å': config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transaction
function createTransactionSummaryData(transactions: TransactionData[], config: TransactionExportRequest): ExportRow[] {
  const totalTransactions = transactions.length
  const totalValue = transactions.reduce((sum, t) => sum + calculateTransactionCost(t), 0)
  
  // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
  const incomingTransactions = transactions.filter(t => 
    ['RECEIVE_EXTERNAL', 'ADJUST_INCREASE', 'TRANSFER_IN', 'UNRESERVE'].includes(t.type)
  )
  const outgoingTransactions = transactions.filter(t => 
    ['DISPENSE_EXTERNAL', 'ADJUST_DECREASE', 'TRANSFER_OUT', 'RESERVE'].includes(t.type)
  )
  
  const incomingValue = incomingTransactions.reduce((sum, t) => sum + calculateTransactionCost(t), 0)
  const outgoingValue = outgoingTransactions.reduce((sum, t) => sum + calculateTransactionCost(t), 0)
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
  const typeStats = transactions.reduce((acc, transaction) => {
    const type = transaction.type
    if (!acc[type]) {
      acc[type] = { count: 0, value: 0 }
    }
    acc[type].count++
    acc[type].value += calculateTransactionCost(transaction)
    return acc
  }, {} as Record<string, { count: number, value: number }>)

  const summaryData: ExportRow[] = [
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°',
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°': totalTransactions,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': totalValue.toFixed(2),
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ç‡πâ‡∏≤': incomingTransactions.length,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤': incomingValue.toFixed(2),
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≠‡∏Å': outgoingTransactions.length,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å': outgoingValue.toFixed(2),
      '‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': (incomingValue - outgoingValue).toFixed(2),
      '‡πÅ‡∏ú‡∏ô‡∏Å': config.department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': new Date().toLocaleString('th-TH')
    },
    {}, // Empty row
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': '',
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ç‡πâ‡∏≤': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤': '',
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≠‡∏Å': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å': '',
      '‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': '',
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    },
    ...Object.entries(typeStats).map(([type, data]) => ({
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': getTransactionTypeLabel(type),
      '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°': data.count,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': data.value.toFixed(2),
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ç‡πâ‡∏≤': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤': '',
      '‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≠‡∏Å': '',
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å': '',
      '‡∏™‡∏∏‡∏ó‡∏ò‡∏¥': '',
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    }))
  ]

  return summaryData
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏° format
function getTransactionColumnWidths(format: 'summary' | 'detailed' | 'financial'): XLSX.ColInfo[] {
  // Summary Format
  if (format === 'summary') {
    return [
      { wch: 12 }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      { wch: 8 },  // ‡πÄ‡∏ß‡∏•‡∏≤
      { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
      { wch: 30 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      { wch: 20 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      { wch: 12 }, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      { wch: 15 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
      { wch: 20 }, // ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    ]
  }

  // Financial Format
  if (format === 'financial') {
    return [
      { wch: 12 }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      { wch: 8 },  // ‡πÄ‡∏ß‡∏•‡∏≤
      { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
      { wch: 25 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
      { wch: 15 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤
      { wch: 20 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
      { wch: 10 }, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      { wch: 12 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
      { wch: 12 }, // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
      { wch: 12 }, // ‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å
      { wch: 12 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
      { wch: 10 }, // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
      { wch: 10 }, // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á
      { wch: 25 }, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      { wch: 15 }, // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
      { wch: 20 }, // ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
      { wch: 10 }, // ‡πÅ‡∏ú‡∏ô‡∏Å
    ]
  }

  // Detailed Format (default)
  return [
    { wch: 12 }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    { wch: 8 },  // ‡πÄ‡∏ß‡∏•‡∏≤
    { wch: 15 }, // ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤
    { wch: 25 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
    { wch: 20 }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç
    { wch: 15 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤
    { wch: 12 }, // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    { wch: 15 }, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
    { wch: 15 }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏
    { wch: 20 }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
    { wch: 10 }, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    { wch: 12 }, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
    { wch: 10 }, // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    { wch: 10 }, // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á
    { wch: 10 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô
    { wch: 10 }, // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏´‡∏•‡∏±‡∏á
    { wch: 12 }, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
    { wch: 12 }, // ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°
    { wch: 15 }, // ‡πÅ‡∏ö‡∏ó‡∏ä‡πå
    { wch: 25 }, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    { wch: 15 }, // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
    { wch: 20 }, // ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    { wch: 10 }, // ‡πÅ‡∏ú‡∏ô‡∏Å
  ]
}