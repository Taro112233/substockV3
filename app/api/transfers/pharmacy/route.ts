// üìÑ File: app/api/transfers/pharmacy/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(request: NextRequest) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• transfer ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°
    // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° schema: fromDept, toDept
    const transfers = await prisma.transfer.findMany({
      where: {
        OR: [
          { fromDept: 'PHARMACY' },
          { toDept: 'PHARMACY' }
        ]
      },
      include: {
        requester: {
          select: {
            firstName: true,
            lastName: true
          }
        },
        approver: {
          select: {
            firstName: true,
            lastName: true
          }
        },
        items: {
          include: {
            drug: {
              select: {
                hospitalDrugCode: true,
                name: true,
                strength: true,
                unit: true
              }
            }
          }
        }
      },
      orderBy: {
        requestedAt: 'desc'
      },
      take: 20 // ‡πÅ‡∏™‡∏î‡∏á 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    })

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const totalTransfers = transfers.length
    const pendingTransfers = transfers.filter(transfer => 
      transfer.status === 'PENDING'
    ).length
    const approvedTransfers = transfers.filter(transfer => 
      transfer.status === 'APPROVED'
    ).length

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö interface
    const mappedTransfers = transfers.map(transfer => ({
      id: transfer.id,
      transferNumber: transfer.requisitionNumber, // ‡πÉ‡∏ä‡πâ requisitionNumber ‡πÅ‡∏ó‡∏ô transferNumber
      fromDepartment: transfer.fromDept,
      toDepartment: transfer.toDept,
      status: transfer.status,
      priority: 'MEDIUM' as const, // ‡πÉ‡∏™‡πà default priority ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô schema
      requestedAt: transfer.requestedAt.toISOString(),
      approvedAt: transfer.approvedAt?.toISOString() || null,
      sentAt: transfer.dispensedAt?.toISOString() || null, // ‡πÉ‡∏ä‡πâ dispensedAt ‡πÅ‡∏ó‡∏ô sentAt
      receivedAt: transfer.receivedAt?.toISOString() || null,
      requestedBy: {
        name: `${transfer.requester.firstName} ${transfer.requester.lastName}`
      },
      approvedBy: transfer.approver ? {
        name: `${transfer.approver.firstName} ${transfer.approver.lastName}`
      } : null,
      items: transfer.items.map(item => ({
        id: item.id,
        drugId: item.drugId,
        requestedQty: item.requestedQty,
        approvedQty: item.approvedQty || 0,
        sentQty: item.dispensedQty || 0, // ‡πÉ‡∏ä‡πâ dispensedQty ‡πÅ‡∏ó‡∏ô sentQty
        receivedQty: item.receivedQty || 0,
        drug: {
          hospitalDrugCode: item.drug.hospitalDrugCode,
          name: item.drug.name,
          strength: item.drug.strength || '',
          unit: item.drug.unit
        }
      })),
      notes: transfer.title || '', // ‡πÉ‡∏ä‡πâ title ‡πÅ‡∏ó‡∏ô notes
      totalItems: transfer.items.length,
      totalValue: transfer.totalValue || 0
    }))

    const responseData = {
      transfers: mappedTransfers,
      stats: {
        totalTransfers,
        pendingTransfers,
        approvedTransfers
      }
    }

    return NextResponse.json({
      success: true,
      data: responseData,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Pharmacy transfers API error:', error)
    
    return NextResponse.json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { 
      status: 500 
    })
  }
}