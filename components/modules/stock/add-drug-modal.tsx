// üìÑ File: components/modules/stock/add-drug-modal.tsx
// Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà

import { useState } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { useToast } from '@/hooks/use-toast'
import { Stock } from '@/types/dashboard'
import { 
  Package, 
  Pill,
  Save,
  X,
  RotateCcw,
  Plus,
  AlertCircle
} from 'lucide-react'

interface AddDrugModalProps {
  isOpen: boolean
  onClose: () => void
  onDrugAdded?: (newStock: Stock) => void
  department: 'PHARMACY' | 'OPD'
}

interface NewDrugData {
  hospitalDrugCode: string
  name: string
  genericName: string | null
  dosageForm: string
  strength: string | null
  unit: string
  packageSize: string | null
  pricePerBox: number
  category: string
  notes: string | null
  // Stock data
  initialQuantity: number
  minimumStock: number
}

// Drug categories
const DRUG_CATEGORIES = [
  { value: 'GENERAL', label: '‡∏¢‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
  { value: 'TABLET', label: '‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î' },
  { value: 'SYRUP', label: '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥' },
  { value: 'INJECTION', label: '‡∏¢‡∏≤‡∏â‡∏µ‡∏î' },
  { value: 'EXTEMP', label: '‡∏¢‡∏≤‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å/‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£' },
  { value: 'HAD', label: '‡∏¢‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á' },
  { value: 'NARCOTIC', label: '‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î' },
  { value: 'PSYCHIATRIC', label: '‡∏¢‡∏≤‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä' },
  { value: 'REFRIGERATED', label: '‡∏¢‡∏≤‡πÄ‡∏¢‡πá‡∏ô' },
  { value: 'FLUID', label: '‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥' },
  { value: 'REFER', label: '‡∏¢‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠' },
  { value: 'ALERT', label: '‡∏¢‡∏≤‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' }
]

// Dosage forms
const DOSAGE_FORMS = [
  'TAB', 'CAP', 'SYR', 'SUS', 'INJ', 'SOL', 'OIN', 'GEL', 'LOT', 'SPR', 
  'SUP', 'ENE', 'POW', 'PWD', 'CR', 'BAG', 'APP', 'LVP', 'MDI', 'NAS', 
  'SAC', 'LIQ', 'MIX'
]

// Initial form data
const initialFormData: NewDrugData = {
  hospitalDrugCode: '',
  name: '',
  genericName: null,
  dosageForm: 'TAB',
  strength: null,
  unit: 'mg',
  packageSize: null,
  pricePerBox: 0,
  category: 'GENERAL',
  notes: null,
  initialQuantity: 0,
  minimumStock: 10
}

export function AddDrugModal({ 
  isOpen, 
  onClose, 
  onDrugAdded,
  department 
}: AddDrugModalProps) {
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState<NewDrugData>(initialFormData)
  const [errors, setErrors] = useState<Record<string, string>>({})

  const { toast } = useToast()

  // Reset form when modal opens/closes
  const handleClose = () => {
    setFormData(initialFormData)
    setErrors({})
    onClose()
  }

  const handleReset = () => {
    setFormData(initialFormData)
    setErrors({})
  }

  // Validation
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {}

    if (!formData.hospitalDrugCode.trim()) {
      newErrors.hospitalDrugCode = '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'
    }

    if (!formData.name.trim()) {
      newErrors.name = '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'
    }

    if (!formData.unit.trim()) {
      newErrors.unit = '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'
    }

    if (formData.pricePerBox < 0) {
      newErrors.pricePerBox = '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'
    }

    if (formData.initialQuantity < 0) {
      newErrors.initialQuantity = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'
    }

    if (formData.minimumStock < 0) {
      newErrors.minimumStock = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handle form submission
  const handleSubmit = async () => {
    if (!validateForm()) {
      toast({
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        variant: "destructive"
      })
      return
    }

    setLoading(true)
    try {
      const response = await fetch('/api/drugs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          ...formData,
          department
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤')
      }

      const { data: newStock } = await response.json()

      toast({
        title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤ "${formData.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        variant: "default"
      })

      onDrugAdded?.(newStock)
      handleClose()
      
    } catch (error) {
      console.error('Error adding drug:', error)
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÑ‡∏î‡πâ',
        variant: "destructive",
        duration: 5000
      })
    } finally {
      setLoading(false)
    }
  }

  // Handle input changes
  const handleInputChange = (field: keyof NewDrugData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    
    // Clear error for this field
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors[field]
        return newErrors
      })
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-4xl max-h-[95vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-lg">
            <Plus className="h-5 w-5" />
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà - {department === 'PHARMACY' ? '‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°' : '‡πÅ‡∏ú‡∏ô‡∏Å OPD'}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Drug Information Card */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base flex items-center gap-2">
                <Pill className="h-4 w-4" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">
                    ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• *
                  </label>
                  <Input
                    value={formData.hospitalDrugCode}
                    onChange={(e) => handleInputChange('hospitalDrugCode', e.target.value)}
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô TAB001"
                    className={errors.hospitalDrugCode ? 'border-red-500' : ''}
                  />
                  {errors.hospitalDrugCode && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.hospitalDrugCode}
                    </p>
                  )}
                </div>

                {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ *</label>
                  <Input
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤"
                    className={errors.name ? 'border-red-500' : ''}
                  />
                  {errors.name && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.name}
                    </p>
                  )}
                </div>

                {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç</label>
                  <Input
                    value={formData.genericName || ''}
                    onChange={(e) => handleInputChange('genericName', e.target.value || null)}
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç"
                  />
                </div>

                {/* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤ */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤</label>
                  <Select
                    value={formData.dosageForm}
                    onValueChange={(value) => handleInputChange('dosageForm', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö" />
                    </SelectTrigger>
                    <SelectContent>
                      {DOSAGE_FORMS.map((form) => (
                        <SelectItem key={form} value={form}>
                          {form}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á</label>
                  <div className="flex gap-2">
                    <Input
                      value={formData.strength || ''}
                      onChange={(e) => handleInputChange('strength', e.target.value || null)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô 500"
                      className="flex-1"
                    />
                    <Input
                      value={formData.unit}
                      onChange={(e) => handleInputChange('unit', e.target.value)}
                      placeholder="‡∏´‡∏ô‡πà‡∏ß‡∏¢"
                      className={`w-20 ${errors.unit ? 'border-red-500' : ''}`}
                    />
                  </div>
                  {errors.unit && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.unit}
                    </p>
                  )}
                </div>

                {/* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏ */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏</label>
                  <Input
                    value={formData.packageSize || ''}
                    onChange={(e) => handleInputChange('packageSize', e.target.value || null)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 100"
                  />
                </div>

                {/* ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á</label>
                  <Input
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.pricePerBox}
                    onChange={(e) => handleInputChange('pricePerBox', parseFloat(e.target.value) || 0)}
                    placeholder="0.00"
                    className={errors.pricePerBox ? 'border-red-500' : ''}
                  />
                  {errors.pricePerBox && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.pricePerBox}
                    </p>
                  )}
                </div>
              </div>

              {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤ */}
              <div className="space-y-2">
                <label className="text-sm font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡∏≤</label>
                <Select
                  value={formData.category}
                  onValueChange={(value) => handleInputChange('category', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" />
                  </SelectTrigger>
                  <SelectContent>
                    {DRUG_CATEGORIES.map((cat) => (
                      <SelectItem key={cat.value} value={cat.value}>
                        {cat.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
              <div className="space-y-2">
                <label className="text-sm font-medium">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                <Textarea
                  value={formData.notes || ''}
                  onChange={(e) => handleInputChange('notes', e.target.value || null)}
                  placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* Stock Information Card */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base flex items-center gap-2">
                <Package className="h-4 w-4" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
                  <Input
                    type="number"
                    min="0"
                    value={formData.initialQuantity}
                    onChange={(e) => handleInputChange('initialQuantity', parseInt(e.target.value) || 0)}
                    placeholder="0"
                    className={errors.initialQuantity ? 'border-red-500' : ''}
                  />
                  {errors.initialQuantity && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.initialQuantity}
                    </p>
                  )}
                </div>

                {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ */}
                <div className="space-y-2">
                  <label className="text-sm font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥</label>
                  <Input
                    type="number"
                    min="0"
                    value={formData.minimumStock}
                    onChange={(e) => handleInputChange('minimumStock', parseInt(e.target.value) || 0)}
                    placeholder="10"
                    className={errors.minimumStock ? 'border-red-500' : ''}
                  />
                  {errors.minimumStock && (
                    <p className="text-sm text-red-600 flex items-center gap-1">
                      <AlertCircle className="h-3 w-3" />
                      {errors.minimumStock}
                    </p>
                  )}
                </div>
              </div>

              {/* ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
              <div className="p-4 bg-gray-50 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</span>
                  <span className="text-lg font-medium text-purple-600">
                    ‡∏ø{(formData.initialQuantity * formData.pricePerBox).toLocaleString()}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={handleReset}
              disabled={loading}
              className="flex-1"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
            <Button
              variant="outline"
              onClick={handleClose}
              disabled={loading}
              className="flex-1"
            >
              <X className="h-4 w-4 mr-2" />
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              onClick={handleSubmit}
              disabled={loading || !formData.hospitalDrugCode.trim() || !formData.name.trim() || !formData.unit.trim()}
              className="flex-1"
            >
              <Save className="h-4 w-4 mr-2" />
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}