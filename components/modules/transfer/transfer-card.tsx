// üìÑ File: components/modules/transfer/transfer-card.tsx

import { Card, CardContent, CardHeader } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Transfer } from '@/types/dashboard'
import {
  FileText,
  Clock,
  CheckCircle,
  XCircle,
  Eye,
  ArrowRight,
  Package
} from 'lucide-react'

interface TransferCardProps {
  transfer: Transfer
  department: 'PHARMACY' | 'OPD'
  onAction: (action: string) => void
  onViewDetail: () => void
}

export function TransferCard({ 
  transfer, 
  department, 
  onAction, 
  onViewDetail 
}: TransferCardProps) {
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PENDING':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'APPROVED':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'SENT':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'RECEIVED':
        return 'bg-gray-100 text-gray-800 border-gray-200'
      case 'CANCELLED':
        return 'bg-red-100 text-red-800 border-red-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  // ‡πÅ‡∏õ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const getStatusText = (status: string) => {
    switch (status) {
      case 'PENDING':
        return '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
      case 'APPROVED':
        return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß'
      case 'SENT':
        return '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß'
      case 'RECEIVED':
        return '‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      case 'CANCELLED':
        return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
      default:
        return status
    }
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î action ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const getAvailableActions = () => {
    const actions = []

    if (transfer.status === 'PENDING') {
      if (department === 'PHARMACY' && transfer.toDepartment === 'PHARMACY') {
        // ‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        actions.push({ label: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', action: 'approve', variant: 'default' as const })
        actions.push({ label: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', action: 'reject', variant: 'destructive' as const })
      }
    } else if (transfer.status === 'APPROVED') {
      if (department === 'PHARMACY' && transfer.fromDepartment === 'PHARMACY') {
        // ‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        actions.push({ label: '‡∏™‡πà‡∏á‡∏¢‡∏≤', action: 'send', variant: 'default' as const })
      }
    } else if (transfer.status === 'SENT') {
      if (department === 'OPD' && transfer.toDepartment === 'OPD') {
        // ‡πÅ‡∏ú‡∏ô‡∏Å OPD ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        actions.push({ label: '‡∏£‡∏±‡∏ö‡∏¢‡∏≤', action: 'receive', variant: 'default' as const })
      }
    }

    return actions
  }

  const availableActions = getAvailableActions()

  return (
    <Card className="hover:shadow-md transition-shadow duration-200">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-2">
            {/* Transfer Number */}
            <div className="font-mono text-sm text-gray-500">
              {transfer.transferNumber}
            </div>
            
            {/* Title/Notes */}
            <h3 className="font-semibold text-sm leading-tight">
              {transfer.notes || '‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏¢‡∏≤'}
            </h3>
            
            {/* Department Flow */}
            <div className="flex items-center gap-2 text-xs text-gray-600">
              <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded">
                {transfer.fromDepartment === 'PHARMACY' ? '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°' : 'OPD'}
              </span>
              <ArrowRight className="h-3 w-3" />
              <span className="px-2 py-1 bg-green-100 text-green-700 rounded">
                {transfer.toDepartment === 'PHARMACY' ? '‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°' : 'OPD'}
              </span>
            </div>
          </div>

          {/* Status Badge */}
          <Badge 
            className={`text-xs ${getStatusColor(transfer.status)}`}
          >
            {getStatusText(transfer.status)}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Transfer Details */}
        <div className="space-y-2">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</span>
            <span className="font-medium">{transfer.totalItems || transfer.items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
          </div>
          
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤:</span>
            <span className="font-medium">‡∏ø{transfer.totalValue?.toLocaleString() || '0'}</span>
          </div>

          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å:</span>
            <span className="font-medium">{transfer.requestedBy.name}</span>
          </div>

          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å:</span>
            <span className="font-medium">
              {new Date(transfer.requestedAt).toLocaleDateString('th-TH')}
            </span>
          </div>
        </div>

        {/* Items Preview */}
        {transfer.items && transfer.items.length > 0 && (
          <div className="border-t pt-3">
            <div className="text-xs text-gray-600 mb-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤:</div>
            <div className="space-y-1">
              {transfer.items.slice(0, 2).map((item) => (
                <div key={item.id} className="flex justify-between text-xs">
                  <span className="truncate flex-1 mr-2">{item.drug.name}</span>
                  <span className="text-gray-500">{item.requestedQty} {item.drug.unit}</span>
                </div>
              ))}
              {transfer.items.length > 2 && (
                <div className="text-xs text-gray-500">
                  ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {transfer.items.length - 2} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </div>
              )}
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-2 pt-2">
          <Button
            variant="outline"
            size="sm"
            onClick={onViewDetail}
            className="flex items-center gap-1 flex-1"
          >
            <Eye className="h-3 w-3" />
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </Button>

          {availableActions.length > 0 && (
            <div className="flex gap-1">
              {availableActions.map((action) => (
                <Button
                  key={action.action}
                  variant={action.variant}
                  size="sm"
                  onClick={() => onAction(action.action)}
                  className="text-xs px-3"
                >
                  {action.label}
                </Button>
              ))}
            </div>
          )}
        </div>

        {/* Last Updated */}
        <div className="text-xs text-gray-500 pt-2 border-t">
          ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date(transfer.requestedAt).toLocaleString('th-TH')}
        </div>
      </CardContent>
    </Card>
  )
}