// üìÑ File: lib/utils/dashboard.ts
// Updated with complete category mapping including PSYCHIATRIC

import { Stock, Transfer, Transaction } from '@/types/dashboard'

// ‚úÖ Export all utility functions for use across components

// Calculate available stock (total - reserved)
export function calculateAvailableStock(stock: Stock): number {
  return Math.max(0, (stock.totalQuantity || 0) - (stock.reservedQty || 0))
}

// Check if stock is low
export function isLowStock(stock: Stock): boolean {
  const available = calculateAvailableStock(stock)
  const minimum = stock.minimumStock || 0
  return available <= minimum && minimum > 0
}

// Get transfer status color
export function getTransferStatusColor(status: string): string {
  const colors: Record<string, string> = {
    'PENDING': 'bg-yellow-100 text-yellow-800',
    'APPROVED': 'bg-blue-100 text-blue-800',
    'SENT': 'bg-purple-100 text-purple-800',
    'RECEIVED': 'bg-green-100 text-green-800',
    'CANCELLED': 'bg-red-100 text-red-800'
  }
  return colors[status] || 'bg-gray-100 text-gray-800'
}

// Get priority color
export function getPriorityColor(priority: string): string {
  const colors: Record<string, string> = {
    'LOW': 'bg-gray-100 text-gray-800',
    'MEDIUM': 'bg-blue-100 text-blue-800',
    'HIGH': 'bg-orange-100 text-orange-800',
    'URGENT': 'bg-red-100 text-red-800'
  }
  return colors[priority] || 'bg-gray-100 text-gray-800'
}

// Enhanced Drug category colors with complete mapping
export function getCategoryColor(category: string): string {
  const colors: Record<string, string> = {
    // Primary Categories
    'GENERAL': 'bg-blue-100 text-blue-800 border-blue-200',
    'TABLET': 'bg-gray-100 text-gray-800 border-gray-200',
    'SYRUP': 'bg-pink-100 text-pink-800 border-pink-200',
    'INJECTION': 'bg-teal-100 text-teal-800 border-teal-200',
    'EXTEMP': 'bg-indigo-100 text-indigo-800 border-indigo-200',
    
    // Special Categories
    'HAD': 'bg-red-100 text-red-800 border-red-200',
    'NARCOTIC': 'bg-purple-100 text-purple-800 border-purple-200',
    'PSYCHIATRIC': 'bg-indigo-100 text-indigo-800 border-indigo-200', // ‚úÖ Added PSYCHIATRIC
    'REFRIGERATED': 'bg-blue-100 text-blue-800 border-blue-200',
    'FLUID': 'bg-cyan-100 text-cyan-800 border-cyan-200',
    
    // Additional Categories
    'ANTIBIOTICS': 'bg-red-100 text-red-800 border-red-200',
    'CONTROLLED': 'bg-purple-100 text-purple-800 border-purple-200',
    'VACCINE': 'bg-green-100 text-green-800 border-green-200',
    'REFER': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    'ALERT': 'bg-red-200 text-red-900 border-red-300'
  }
  return colors[category] || 'bg-gray-100 text-gray-800 border-gray-200'
}

// Enhanced Drug category labels with complete Thai mapping
export function getCategoryLabel(category: string): string {
  const labels: Record<string, string> = {
    // Primary Categories
    'GENERAL': '‡∏¢‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    'TABLET': '‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î',
    'SYRUP': '‡∏¢‡∏≤‡∏ô‡πâ‡∏≥',
    'INJECTION': '‡∏¢‡∏≤‡∏â‡∏µ‡∏î',
    'EXTEMP': '‡∏¢‡∏≤‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å/‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£',
    
    // Special Categories
    'HAD': '‡∏¢‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á',
    'NARCOTIC': '‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î',
    'PSYCHIATRIC': '‡∏¢‡∏≤‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä', // ‚úÖ Added PSYCHIATRIC with Thai label
    'REFRIGERATED': '‡∏¢‡∏≤‡πÄ‡∏¢‡πá‡∏ô',
    'FLUID': '‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥',
    
    // Additional Categories
    'ANTIBIOTICS': '‡∏¢‡∏≤‡∏õ‡∏è‡∏¥‡∏ä‡∏µ‡∏ß‡∏ô‡∏∞',
    'CONTROLLED': '‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°',
    'VACCINE': '‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô',
    'REFER': '‡∏¢‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠',
    'ALERT': '‡∏¢‡∏≤‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'
  }
  return labels[category] || category
}

// Get dosage form label in Thai
export function getDosageFormLabel(dosageForm: string): string {
  const labels: Record<string, string> = {
    'TAB': '‡πÄ‡∏°‡πá‡∏î',
    'CAP': '‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•',
    'SYR': '‡∏ô‡πâ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°',
    'SUS': '‡∏¢‡∏≤‡πÅ‡∏Ç‡∏ß‡∏ô‡∏ï‡∏∞‡∏Å‡∏≠‡∏ô',
    'INJ': '‡∏¢‡∏≤‡∏â‡∏µ‡∏î',
    'SOL': '‡∏™‡∏≤‡∏£‡∏•‡∏∞‡∏•‡∏≤‡∏¢',
    'OIN': '‡∏Ñ‡∏£‡∏µ‡∏°/‡∏¢‡∏≤‡∏ó‡∏≤',
    'GEL': '‡πÄ‡∏à‡∏•',
    'LOT': '‡πÇ‡∏•‡∏ä‡∏±‡πà‡∏ô',
    'SPR': '‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå',
    'SUP': '‡∏¢‡∏≤‡πÄ‡∏´‡∏ô‡πá‡∏ö',
    'ENE': '‡∏¢‡∏≤‡∏™‡∏ß‡∏ô‡∏•‡∏≥‡πÑ‡∏™‡πâ',
    'POW': '‡∏ú‡∏á',
    'PWD': '‡πÅ‡∏õ‡πâ‡∏á',
    'CR': '‡∏Ñ‡∏£‡∏µ‡∏°',
    'BAG': '‡∏ñ‡∏∏‡∏á',
    'APP': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠',
    'LVP': '‡∏ñ‡∏∏‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏î',
    'MDI': '‡∏û‡πà‡∏ô‡∏™‡∏π‡∏î‡∏î‡∏°',
    'NAS': '‡∏û‡πà‡∏ô‡∏à‡∏°‡∏π‡∏Å',
    'SAC': '‡∏ã‡∏≠‡∏á',
    'LIQ': '‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß',
    'MIX': '‡∏ú‡∏™‡∏°'
  }
  return labels[dosageForm] || dosageForm
}

// Get transaction type info
export function getTransactionTypeInfo(type: string) {
  const config = {
    'RECEIVE_EXTERNAL': { 
      label: '‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', 
      color: 'bg-green-100 text-green-800 border-green-200',
      description: '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏´‡∏•‡πà‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    },
    'DISPENSE': { 
      label: '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤', 
      color: 'bg-blue-100 text-blue-800 border-blue-200',
      description: '‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πà‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤'
    },
    'TRANSFER_IN': { 
      label: '‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡πÇ‡∏≠‡∏ô', 
      color: 'bg-purple-100 text-purple-800 border-purple-200',
      description: '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'
    },
    'TRANSFER_OUT': { 
      label: '‡πÇ‡∏≠‡∏ô‡∏¢‡∏≤‡∏≠‡∏≠‡∏Å', 
      color: 'bg-orange-100 text-orange-800 border-orange-200',
      description: '‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'
    },
    'ADJUST_INCREASE': { 
      label: '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å', 
      color: 'bg-green-100 text-green-800 border-green-200',
      description: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    },
    'ADJUST_DECREASE': { 
      label: '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å', 
      color: 'bg-red-100 text-red-800 border-red-200',
      description: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    },
    'RESERVE': { 
      label: '‡∏à‡∏≠‡∏á‡∏¢‡∏≤', 
      color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      description: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï'
    },
    'UNRESERVE': { 
      label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', 
      color: 'bg-gray-100 text-gray-800 border-gray-200',
      description: '‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏à‡∏≠‡∏á‡πÑ‡∏ß‡πâ'
    }
  }
  
  return config[type as keyof typeof config] || { 
    label: type, 
    color: 'bg-gray-100 text-gray-800 border-gray-200',
    description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
  }
}

// Format currency in Thai Baht
export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB',
    minimumFractionDigits: 2
  }).format(amount)
}

// Format date in Thai format
export function formatThaiDate(date: string | Date): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return dateObj.toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

// Format date and time in Thai format
export function formatThaiDateTime(date: string | Date): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  return dateObj.toLocaleString('th-TH', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

// Calculate percentage change
export function calculatePercentageChange(current: number, previous: number): number {
  if (previous === 0) return current > 0 ? 100 : 0
  return ((current - previous) / previous) * 100
}

// Format percentage with sign
export function formatPercentage(value: number): string {
  const sign = value > 0 ? '+' : ''
  return `${sign}${value.toFixed(1)}%`
}

// Get stock status
export function getStockStatus(stock: Stock): 'normal' | 'low' | 'empty' {
  const available = calculateAvailableStock(stock)
  if (available === 0) return 'empty'
  if (isLowStock(stock)) return 'low'
  return 'normal'
}

// Get stock status color
export function getStockStatusColor(status: 'normal' | 'low' | 'empty'): string {
  const colors = {
    'normal': 'text-green-600',
    'low': 'text-orange-600',
    'empty': 'text-red-600'
  }
  return colors[status]
}

// Check if user can perform action based on department and role
export function canPerformAction(
  userDepartment: string,
  userRole: string,
  requiredDepartment?: string,
  requiredRole?: string
): boolean {
  // Admin can do everything
  if (userRole === 'ADMIN') return true
  
  // Check department permission
  if (requiredDepartment && userDepartment !== requiredDepartment) {
    return false
  }
  
  // Check role permission
  if (requiredRole && userRole !== requiredRole) {
    return false
  }
  
  return true
}

// Validate drug code format
export function isValidDrugCode(code: string): boolean {
  // Format: AAA000 (3 letters + 3 numbers)
  const pattern = /^[A-Z]{3}\d{3}$/
  return pattern.test(code)
}

// Generate next drug code
export function generateNextDrugCode(prefix: string, existingCodes: string[]): string {
  const codePattern = new RegExp(`^${prefix}(\\d{3})$`)
  const numbers = existingCodes
    .filter(code => codePattern.test(code))
    .map(code => parseInt(code.replace(prefix, ''), 10))
    .sort((a, b) => b - a)
  
  const nextNumber = numbers.length > 0 ? numbers[0] + 1 : 1
  return `${prefix}${nextNumber.toString().padStart(3, '0')}`
}