// üìÑ File: lib/utils/excel.ts
// ‚úÖ FIXED: Excel Export Utility Functions - ‡πÅ‡∏Å‡πâ TypeScript errors

import * as XLSX from 'xlsx'
import type { Stock, Drug, Department } from '@/types/index'

// Base interfaces for Excel operations
export interface ExcelExportOptions {
  filename?: string
  sheetName?: string
  autoWidth?: boolean
  freezePanes?: { row: number; col: number }
  headers?: Record<string, unknown>
  footers?: Record<string, unknown>
}

export interface ExcelColumn {
  key: string
  header: string
  width?: number
  type?: 'string' | 'number' | 'date' | 'currency'
  format?: string
}

// ‚úÖ FIXED: Stock-specific interfaces with index signature
export interface StockExportData extends Record<string, unknown> {
  drugCode: string
  drugName: string
  genericName?: string
  category: string
  dosageForm: string
  strength?: string
  unit: string
  packageSize?: string
  totalQuantity: number
  reservedQty: number
  availableStock: number
  minimumStock: number
  pricePerBox: number
  stockValue: number
  status: string
  lastUpdated: Date | string
}

export interface StockSummaryData extends Record<string, unknown> {
  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: string
  ‡πÅ‡∏ú‡∏ô‡∏Å?: string
  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤?: number
  ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°?: number
  ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥?: number | string
  '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export'?: string
}

export interface CategoryStats {
  [category: string]: {
    count: number
    value: number
  }
}

// ‚úÖ FIXED: Generic function with proper constraints
export function createExcelFromData<T extends Record<string, unknown>>(
  data: T[],
  columns: ExcelColumn[],
  options: ExcelExportOptions = {}
): XLSX.WorkBook {
  const workbook = XLSX.utils.book_new()
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á worksheet
  const worksheet = createWorksheetFromData(data, columns, options)
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° worksheet ‡∏•‡∏á‡πÉ‡∏ô workbook
  const sheetName = options.sheetName || 'Sheet1'
  XLSX.utils.book_append_sheet(workbook, worksheet, sheetName)
  
  return workbook
}

// ‚úÖ FIXED: Worksheet creation with proper typing
function createWorksheetFromData<T extends Record<string, unknown>>(
  data: T[],
  columns: ExcelColumn[],
  options: ExcelExportOptions = {}
): XLSX.WorkSheet {
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° headers
  const headers = columns.map(col => col.header)
  
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° data rows
  const rows = data.map(item => 
    columns.map(col => formatCellValue(item[col.key], col))
  )
  
  // ‡∏£‡∏ß‡∏° headers ‡∏Å‡∏±‡∏ö data
  const wsData = [headers, ...rows]
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á worksheet
  const worksheet = XLSX.utils.aoa_to_sheet(wsData)
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
  if (options.autoWidth || columns.some(col => col.width)) {
    worksheet['!cols'] = columns.map(col => ({
      wch: col.width || calculateAutoWidth(data, col.key, col.header)
    }))
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ freeze panes
  if (options.freezePanes) {
    worksheet['!freeze'] = {
      xSplit: options.freezePanes.col,
      ySplit: options.freezePanes.row,
      topLeftCell: XLSX.utils.encode_cell({
        r: options.freezePanes.row,
        c: options.freezePanes.col
      })
    }
  }
  
  return worksheet
}

// ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô cell ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
function formatCellValue(value: unknown, column: ExcelColumn): string | number | Date {
  if (value === null || value === undefined) {
    return ''
  }
  
  switch (column.type) {
    case 'number':
      return typeof value === 'number' ? value : parseFloat(String(value)) || 0
    
    case 'currency':
      const numValue = typeof value === 'number' ? value : parseFloat(String(value)) || 0
      return numValue
    
    case 'date':
      if (value instanceof Date) {
        return value
      } else if (typeof value === 'string') {
        const date = new Date(value)
        return isNaN(date.getTime()) ? value : date
      }
      return String(value)
    
    case 'string':
    default:
      return String(value)
  }
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function calculateAutoWidth<T extends Record<string, unknown>>(
  data: T[], 
  key: string, 
  header: string
): number {
  const headerLength = header.length
  const maxDataLength = Math.max(
    ...data.map(item => String(item[key] || '').length),
    0
  )
  
  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 8, ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á 50
  return Math.min(Math.max(headerLength, maxDataLength, 8), 50)
}

// Export ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel (Browser)
export function downloadExcelFile(
  workbook: XLSX.WorkBook,
  filename: string = 'export.xlsx'
): void {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á buffer
  const buffer = XLSX.write(workbook, { 
    type: 'array', 
    bookType: 'xlsx',
    compression: true
  })
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á blob
  const blob = new Blob([buffer], { 
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
  })
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
  const url = window.URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  window.URL.revokeObjectURL(url)
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
function convertStockToExportData(stock: Stock & { drug: Drug }): StockExportData {
  const availableStock = stock.totalQuantity - stock.reservedQty
  
  let status = '‡∏õ‡∏Å‡∏ï‡∏¥'
  if (availableStock <= 0) {
    status = '‡∏´‡∏°‡∏î'
  } else if (availableStock <= stock.minimumStock) {
    status = '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥'
  }
  
  return {
    drugCode: stock.drug.hospitalDrugCode,
    drugName: stock.drug.name,
    genericName: stock.drug.genericName,
    category: stock.drug.category,
    dosageForm: stock.drug.dosageForm,
    strength: stock.drug.strength,
    unit: stock.drug.unit,
    packageSize: stock.drug.packageSize,
    totalQuantity: stock.totalQuantity,
    reservedQty: stock.reservedQty,
    availableStock,
    minimumStock: stock.minimumStock,
    pricePerBox: stock.drug.pricePerBox,
    stockValue: stock.totalValue,
    status,
    lastUpdated: stock.lastUpdated
  }
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÅ‡∏ö‡∏ö summary)
export function createStockSummaryExcel(
  stocks: (Stock & { drug: Drug })[],
  department: Department
): XLSX.WorkBook {
  const exportData: StockExportData[] = stocks.map(convertStockToExportData)
  
  const columns: ExcelColumn[] = [
    { key: 'drugCode', header: '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤', width: 15 },
    { key: 'drugName', header: '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤', width: 30 },
    { key: 'category', header: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', width: 15 },
    { key: 'dosageForm', header: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö', width: 10 },
    { key: 'strength', header: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á', width: 15 },
    { key: 'availableStock', header: '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', width: 12, type: 'number' },
    { key: 'minimumStock', header: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥', width: 12, type: 'number' },
    { key: 'stockValue', header: '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏ö‡∏≤‡∏ó)', width: 15, type: 'currency' },
    { key: 'status', header: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', width: 12 },
    { key: 'lastUpdated', header: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', width: 20, type: 'date' }
  ]
  
  const departmentName = department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  
  return createExcelFromData(exportData, columns, {
    sheetName: `‡∏™‡∏ï‡πá‡∏≠‡∏Å_${departmentName}`,
    autoWidth: true,
    freezePanes: { row: 1, col: 0 }
  })
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÅ‡∏ö‡∏ö detailed)
export function createStockDetailedExcel(
  stocks: (Stock & { drug: Drug })[],
  department: Department
): XLSX.WorkBook {
  const workbook = XLSX.utils.book_new()
  const exportData: StockExportData[] = stocks.map(convertStockToExportData)
  
  // Sheet ‡∏´‡∏•‡∏±‡∏Å: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å
  const stockColumns: ExcelColumn[] = [
    { key: 'drugCode', header: '‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏≤', width: 15 },
    { key: 'drugName', header: '‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤', width: 30 },
    { key: 'genericName', header: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç', width: 25 },
    { key: 'category', header: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', width: 15 },
    { key: 'dosageForm', header: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö', width: 10 },
    { key: 'strength', header: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á', width: 15 },
    { key: 'unit', header: '‡∏´‡∏ô‡πà‡∏ß‡∏¢', width: 8 },
    { key: 'packageSize', header: '‡∏Ç‡∏ô‡∏≤‡∏î‡∏ö‡∏£‡∏£‡∏à‡∏∏', width: 12 },
    { key: 'totalQuantity', header: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°', width: 12, type: 'number' },
    { key: 'reservedQty', header: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≠‡∏á', width: 12, type: 'number' },
    { key: 'availableStock', header: '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', width: 12, type: 'number' },
    { key: 'minimumStock', header: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥', width: 12, type: 'number' },
    { key: 'pricePerBox', header: '‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏•‡πà‡∏≠‡∏á', width: 12, type: 'currency' },
    { key: 'stockValue', header: '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°', width: 15, type: 'currency' },
    { key: 'status', header: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', width: 12 },
    { key: 'lastUpdated', header: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', width: 20, type: 'date' }
  ]
  
  const departmentName = department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  const stockSheet = createWorksheetFromData(exportData, stockColumns, {
    autoWidth: true,
    freezePanes: { row: 1, col: 0 }
  })
  
  XLSX.utils.book_append_sheet(workbook, stockSheet, `‡∏™‡∏ï‡πá‡∏≠‡∏Å_${departmentName}`)
  
  // Sheet ‡∏™‡∏£‡∏∏‡∏õ
  const summaryData = createStockSummary(exportData, department)
  const summarySheet = XLSX.utils.json_to_sheet(summaryData)
  XLSX.utils.book_append_sheet(workbook, summarySheet, '‡∏™‡∏£‡∏∏‡∏õ')
  
  return workbook
}

// ‚úÖ FIXED: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ with proper typing
function createStockSummary(stocks: StockExportData[], department: Department): StockSummaryData[] {
  const totalStocks = stocks.length
  const totalValue = stocks.reduce((sum, stock) => sum + (Number(stock.stockValue) || 0), 0)
  const lowStockCount = stocks.filter(stock => stock.status === '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥').length
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const categoryStats: CategoryStats = stocks.reduce((acc, stock) => {
    const category = String(stock.category) || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    if (!acc[category]) {
      acc[category] = { count: 0, value: 0 }
    }
    acc[category].count++
    acc[category].value += Number(stock.stockValue) || 0
    return acc
  }, {} as CategoryStats)
  
  const departmentName = department === 'PHARMACY' ? '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤' : 'OPD'
  
  const summaryData: StockSummaryData[] = [
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°',
      '‡πÅ‡∏ú‡∏ô‡∏Å': departmentName,
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': totalStocks,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': totalValue,
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': lowStockCount,
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': new Date().toLocaleString('th-TH')
    },
    {
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': ''
    },
    { 
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': '‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' 
    }
  ]
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  Object.entries(categoryStats).forEach(([category, data]) => {
    summaryData.push({
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': category,
      '‡πÅ‡∏ú‡∏ô‡∏Å': '',
      '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤': data.count,
      '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°': data.value,
      '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥': '',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà Export': ''
    })
  })
  
  return summaryData
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡πÄ‡∏ß‡∏•‡∏≤
export function formatDateForExcel(date: Date | string | null | undefined): Date | string {
  if (!date) return ''
  
  const d = date instanceof Date ? date : new Date(date)
  return isNaN(d.getTime()) ? String(date) : d
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
export function formatNumberForExcel(value: unknown): number {
  if (typeof value === 'number') return value
  const num = parseFloat(String(value))
  return isNaN(num) ? 0 : num
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
export function formatCurrencyForExcel(value: unknown): number {
  return formatNumberForExcel(value)
}