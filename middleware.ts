// middleware.ts - ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á user data ‡πÉ‡∏ô headers
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { verifyToken, isUserActive } from './lib/auth';

// Routes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authenticate
const publicRoutes = ['/login', '/register'];
const publicApiRoutes = ['/api/auth/login', '/api/auth/register', '/api/health'];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  console.log(`üîç Middleware: ${pathname}`);
  
  // ‡∏Ç‡πâ‡∏≤‡∏° static files ‡πÅ‡∏•‡∏∞ API routes ‡∏ó‡∏µ‡πà public
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/static') ||
    pathname.includes('.') ||
    publicRoutes.includes(pathname) ||
    publicApiRoutes.includes(pathname)
  ) {
    return NextResponse.next();
  }

  // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å cookie
  const token = request.cookies.get('auth-token')?.value;
  
  console.log(`üç™ Token exists: ${!!token}`);
  if (token) {
    console.log(`üç™ Token preview: ${token.substring(0, 20)}...`);
  }

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ token -> redirect ‡πÑ‡∏õ login
  if (!token) {
    console.log(`‚ùå No token, redirecting to login`);
    if (pathname.startsWith('/api/')) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    return NextResponse.redirect(new URL('/login', request.url));
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏î‡πâ‡∏ß‡∏¢ Jose (async)
  try {
    const user = await verifyToken(token);
    
    if (!user || !isUserActive(user)) {
      console.log(`‚ùå Invalid token or inactive user`);
      
      const response = pathname.startsWith('/api/')
        ? NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 })
        : NextResponse.redirect(new URL('/login', request.url));
      
      // ‡∏•‡∏ö cookie ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      response.cookies.delete('auth-token');
      return response;
    }

    console.log(`‚úÖ User authenticated: ${user.username}`);

    // ‚≠ê ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á user data ‡πÉ‡∏ô headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Unicode
    // API routes ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å token ‡πÉ‡∏ô cookie ‡πÄ‡∏≠‡∏á
    
    console.log(`üì§ Middleware passed successfully`);
    return NextResponse.next();
    
  } catch (error) {
    console.error('‚ùå Token verification failed:', error);
    
    const response = pathname.startsWith('/api/')
      ? NextResponse.json({ error: 'Token verification failed' }, { status: 401 })
      : NextResponse.redirect(new URL('/login', request.url));
    
    response.cookies.delete('auth-token');
    return response;
  }
}

export const config = {
  matcher: [
    // Match all request paths except static files and images
    '/((?!_next/static|_next/image|favicon.ico|manifest.json|sw.js|workbox-.*).*)',
  ],
};