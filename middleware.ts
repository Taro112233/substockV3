// üìÑ File: middleware.ts
// ‚úÖ Updated to exclude /api/transactions/* from authentication

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { verifyToken, isUserActive } from './lib/auth';

// Routes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authenticate
const publicRoutes = ['/login', '/register', '/'];
const publicApiRoutes = [
  '/api/auth/login', 
  '/api/auth/register', 
  '/api/health',
  '/api/transactions/pharmacy',  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° transaction APIs
  '/api/transactions/opd'        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° transaction APIs
];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  console.log(`üîç Middleware: ${pathname}`);

  // ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏° static files, public routes ‡πÅ‡∏•‡∏∞ transaction APIs
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/static') ||
    pathname.includes('.') ||
    publicRoutes.includes(pathname) ||
    publicApiRoutes.some(route => pathname.startsWith(route)) || // ‚úÖ ‡πÉ‡∏ä‡πâ startsWith ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° sub-paths
    pathname.startsWith('/api/transactions') // ‚úÖ exclude ‡∏ó‡∏±‡πâ‡∏á /api/transactions/* 
  ) {
    console.log(`‚úÖ Public route, bypassing auth: ${pathname}`);
    return NextResponse.next();
  }

  // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å cookie
  const token = request.cookies.get('auth-token')?.value;

  console.log(`üç™ Token exists: ${!!token}`);
  if (token) {
    console.log(`üç™ Token preview: ${token.substring(0, 20)}...`);
  }

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ token -> redirect ‡πÑ‡∏õ login
  if (!token) {
    console.log(`‚ùå No token, redirecting to login`);
    if (pathname.startsWith('/api/')) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    return NextResponse.redirect(new URL('/login', request.url));
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
  try {
    const user = await verifyToken(token);

    if (!user || !isUserActive(user)) {
      console.log(`‚ùå Invalid token or inactive user`);

      const response = pathname.startsWith('/api/')
        ? NextResponse.json({ error: 'Invalid or expired token' }, { status: 401 })
        : NextResponse.redirect(new URL('/login', request.url));

      response.cookies.delete('auth-token');
      return response;
    }

    console.log(`‚úÖ User authenticated: ${user.username}`);
    console.log(`üì§ Middleware passed successfully`);
    return NextResponse.next();

  } catch (error) {
    console.error('‚ùå Token verification failed:', error);

    const response = pathname.startsWith('/api/')
      ? NextResponse.json({ error: 'Token verification failed' }, { status: 401 })
      : NextResponse.redirect(new URL('/login', request.url));

    response.cookies.delete('auth-token');
    return response;
  }
}

// ‚úÖ Updated config matcher: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á exclude ‡πÉ‡∏ô matcher ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ handle ‡πÉ‡∏ô logic ‡πÅ‡∏•‡πâ‡∏ß
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|manifest.json|sw.js|workbox-.*).*)',
  ],
};