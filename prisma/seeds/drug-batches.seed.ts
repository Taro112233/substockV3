// prisma/seeds/drug-batches.seed.ts - Hospital Pharmacy V3.0 Drug Batch Management
// ‡∏™‡∏£‡πâ‡∏≤‡∏á lot/batch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° FIFO

import { PrismaClient } from "@prisma/client";

interface BatchSeedData {
  drugCode: string;
  department: "PHARMACY" | "OPD";
  batches: {
    lotNumber: string;
    expiryDate: string;
    manufacturer: string;
    quantity: number;
    costPerUnit: number;
    receivedDate?: string;
  }[];
}

export async function seedDrugBatches(prisma: PrismaClient) {
  console.log("üì¶ Creating Drug Batches for Hospital Pharmacy V3.0...");
  console.log("üè• FIFO Inventory Management System");
  console.log("üìÖ Expiry Date Tracking & Alerts");

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    const existingDrugs = await prisma.drug.findMany({
      select: {
        id: true,
        hospitalDrugCode: true,
        name: true,
        pricePerBox: true,
        unit: true
      },
      where: {
        isActive: true
      }
    });

    if (existingDrugs.length === 0) {
      console.log("‚ö†Ô∏è  No drugs found - please run drug seed first");
      return createSampleBatches(prisma);
    }

    console.log(`üíä Found ${existingDrugs.length} drugs to create batches for`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á batch data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const batchDataList = createBatchDataForDrugs(existingDrugs);
    
    // Import batches ‡∏•‡∏á database
    const importResult = await importBatchesToDatabase(prisma, batchDataList, existingDrugs);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
    console.log(generateBatchSummary(importResult));

    return {
      totalBatches: importResult.totalBatches,
      totalValue: importResult.totalValue,
      pharmacyBatches: importResult.pharmacyBatches,
      opdBatches: importResult.opdBatches,
      expiryAlerts: importResult.expiryAlerts,
      success: true
    };

  } catch (error) {
    console.error("‚ùå Failed to create drug batches:", error);
    
    // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á sample batches
    console.log("üîÑ Creating sample batches instead...");
    return createSampleBatches(prisma);
  }
}

function createBatchDataForDrugs(drugs: any[]): BatchSeedData[] {
  const batchData: BatchSeedData[] = [];
  
  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
  const today = new Date();
  const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate());
  const sixMonths = new Date(today.getFullYear(), today.getMonth() + 6, today.getDate());
  const oneYear = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate());
  const twoYears = new Date(today.getFullYear() + 2, today.getMonth(), today.getDate());

  // Manufacturers list
  const manufacturers = [
    "GPO (Government Pharmaceutical Organization)",
    "Siam Pharmaceutical Co., Ltd.",
    "Berlin Pharmaceutical Industry",
    "T.P. Drug Laboratories (1969) Ltd.",
    "Pharmaland (1982) Ltd.",
    "Greater Pharma Ltd.",
    "Medpharma Ltd.",
    "United Pharma Co., Ltd.",
    "Thai Nakorn Patana Co., Ltd.",
    "Globex Pharma Co., Ltd."
  ];

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 100 batches ‡∏£‡∏ß‡∏°
    const maxDrugsToProcess = Math.min(35, drugs.length); // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 35 ‡∏¢‡∏≤ x 3 batches = 105 batches
    
    for (let i = 0; i < maxDrugsToProcess; i++) {
      const drug = drugs[i];
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á batches ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å PHARMACY (main inventory)
      const pharmacyBatches = [
        {
          lotNumber: `PH${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(i + 1).padStart(3, '0')}A`,
          expiryDate: sixMonths.toISOString().split('T')[0],
          manufacturer: manufacturers[i % manufacturers.length],
          quantity: Math.floor(Math.random() * 50) + 20, // 20-70
          costPerUnit: Number((drug.pricePerBox * 0.7).toFixed(2)), // 70% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢
          receivedDate: new Date(today.getTime() - (Math.random() * 30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0] // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        },
        {
          lotNumber: `PH${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(i + 1).padStart(3, '0')}B`,
          expiryDate: oneYear.toISOString().split('T')[0],
          manufacturer: manufacturers[(i + 1) % manufacturers.length],
          quantity: Math.floor(Math.random() * 40) + 15, // 15-55
          costPerUnit: Number((drug.pricePerBox * 0.75).toFixed(2)),
          receivedDate: new Date(today.getTime() - (Math.random() * 15 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0] // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        }
      ];

      // ‡∏ö‡∏≤‡∏á‡∏¢‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ batch ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing alert)
      if (i % 5 === 0) {
        pharmacyBatches.push({
          lotNumber: `PH${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(i + 1).padStart(3, '0')}X`,
          expiryDate: nextMonth.toISOString().split('T')[0], // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
          manufacturer: manufacturers[(i + 2) % manufacturers.length],
          quantity: Math.floor(Math.random() * 10) + 5, // 5-15 (‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏Å‡πà‡∏≤)
          costPerUnit: Number((drug.pricePerBox * 0.6).toFixed(2)), // ‡∏ñ‡∏π‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏Å‡πà‡∏≤
          receivedDate: new Date(today.getTime() - (Math.random() * 60 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0] // 60 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        });
      }

      batchData.push({
        drugCode: drug.hospitalDrugCode,
        department: "PHARMACY",
        batches: pharmacyBatches
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á batches ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OPD (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 1 ‡πÉ‡∏ô 4 ‡∏¢‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
      if (i % 4 === 0 && i < 15) { // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 15 ‡∏¢‡∏≤‡πÅ‡∏£‡∏Å ‡∏ó‡∏∏‡∏Å 4 ‡∏¢‡∏≤
        const opdBatches = [
          {
            lotNumber: `OP${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(i + 1).padStart(3, '0')}A`,
            expiryDate: oneYear.toISOString().split('T')[0],
            manufacturer: manufacturers[i % manufacturers.length],
            quantity: Math.floor(Math.random() * 15) + 5, // 5-20
            costPerUnit: Number((drug.pricePerBox * 0.75).toFixed(2)),
            receivedDate: new Date(today.getTime() - (Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0] // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          }
        ];

        batchData.push({
          drugCode: drug.hospitalDrugCode,
          department: "OPD",
          batches: opdBatches
        });
      }
    }

  return batchData;
}

async function importBatchesToDatabase(
  prisma: PrismaClient, 
  batchDataList: BatchSeedData[], 
  drugs: any[]
) {
  console.log(`üîÑ Starting batch import for ${batchDataList.length} drug-department combinations...`);
  
  let totalBatches = 0;
  let totalValue = 0;
  let pharmacyBatches = 0;
  let opdBatches = 0;
  let expiryAlerts = 0;
  const thirtyDaysFromNow = new Date();
  thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);

  for (const batchGroup of batchDataList) {
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ drug ID
      const drug = drugs.find(d => d.hospitalDrugCode === batchGroup.drugCode);
      if (!drug) {
        console.warn(`‚ö†Ô∏è  Drug not found: ${batchGroup.drugCode}`);
        continue;
      }

      console.log(`üì¶ Creating batches for ${drug.name} (${batchGroup.department})`);

      for (const batchInfo of batchGroup.batches) {
        try {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á batch record
          const batch = await prisma.drugBatch.create({
            data: {
              drugId: drug.id,
              department: batchGroup.department,
              lotNumber: batchInfo.lotNumber,
              expiryDate: new Date(batchInfo.expiryDate),
              manufacturer: batchInfo.manufacturer,
              quantity: batchInfo.quantity,
              costPerUnit: batchInfo.costPerUnit,
              receivedDate: new Date(batchInfo.receivedDate || new Date()),
            },
          });

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡∏ï‡∏≤‡∏° batch ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
          await updateStockFromBatch(prisma, drug.id, batchGroup.department, batchInfo);

          totalBatches++;
          totalValue += batchInfo.quantity * batchInfo.costPerUnit;
          
          if (batchGroup.department === "PHARMACY") {
            pharmacyBatches++;
          } else {
            opdBatches++;
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          if (new Date(batchInfo.expiryDate) <= thirtyDaysFromNow) {
            expiryAlerts++;
          }

          console.log(`  ‚úÖ ${batchInfo.lotNumber} - ${batchInfo.quantity} units (Exp: ${batchInfo.expiryDate})`);

        } catch (batchError) {
          console.error(`‚ùå Failed to create batch ${batchInfo.lotNumber}:`, batchError);
        }
      }

    } catch (groupError) {
      console.error(`‚ùå Failed to process batches for ${batchGroup.drugCode}:`, groupError);
    }
  }

  return {
    totalBatches,
    totalValue,
    pharmacyBatches,
    opdBatches,
    expiryAlerts
  };
}

async function updateStockFromBatch(
  prisma: PrismaClient,
  drugId: string,
  department: "PHARMACY" | "OPD",
  batchInfo: any
) {
  // ‡∏´‡∏≤ stock record ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
  const existingStock = await prisma.stock.findUnique({
    where: {
      drugId_department: {
        drugId: drugId,
        department: department
      }
    }
  });

  if (existingStock) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    await prisma.stock.update({
      where: { id: existingStock.id },
      data: {
        totalQuantity: existingStock.totalQuantity + batchInfo.quantity,
        totalValue: existingStock.totalValue + (batchInfo.quantity * batchInfo.costPerUnit),
        lastUpdated: new Date(),
      }
    });
  } else {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á stock record ‡πÉ‡∏´‡∏°‡πà
    await prisma.stock.create({
      data: {
        drugId: drugId,
        department: department,
        totalQuantity: batchInfo.quantity,
        reservedQty: 0,
        minimumStock: department === "PHARMACY" ? 20 : 5,
        totalValue: batchInfo.quantity * batchInfo.costPerUnit,
      }
    });
  }
}

async function createSampleBatches(prisma: PrismaClient) {
  console.log("üì¶ Creating sample drug batches...");
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á sample drug ‡πÅ‡∏•‡∏∞ batch
  const sampleData = [
    {
      drugCode: "SAMPLE001",
      drugName: "Sample Paracetamol 500mg",
      batches: [
        {
          lotNumber: "PH202508001A",
          expiryDate: "2026-12-31",
          manufacturer: "GPO Thailand",
          quantity: 100,
          costPerUnit: 0.50,
        }
      ]
    }
  ];

  let created = 0;
  
  for (const sample of sampleData) {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á sample drug ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const drug = await prisma.drug.upsert({
        where: { hospitalDrugCode: sample.drugCode },
        update: {},
        create: {
          hospitalDrugCode: sample.drugCode,
          name: sample.drugName,
          genericName: "Paracetamol",
          dosageForm: "TAB",
          unit: "mg",
          pricePerBox: 60.00,
          category: "GENERAL",
          isActive: true,
        },
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á batch
      for (const batchInfo of sample.batches) {
        await prisma.drugBatch.create({
          data: {
            drugId: drug.id,
            department: "PHARMACY",
            lotNumber: batchInfo.lotNumber,
            expiryDate: new Date(batchInfo.expiryDate),
            manufacturer: batchInfo.manufacturer,
            quantity: batchInfo.quantity,
            costPerUnit: batchInfo.costPerUnit,
            receivedDate: new Date(),
          },
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock
        await prisma.stock.upsert({
          where: {
            drugId_department: {
              drugId: drug.id,
              department: "PHARMACY"
            }
          },
          update: {
            totalQuantity: batchInfo.quantity,
            totalValue: batchInfo.quantity * batchInfo.costPerUnit,
          },
          create: {
            drugId: drug.id,
            department: "PHARMACY",
            totalQuantity: batchInfo.quantity,
            reservedQty: 0,
            minimumStock: 20,
            totalValue: batchInfo.quantity * batchInfo.costPerUnit,
          },
        });

        created++;
      }

      console.log(`  ‚úÖ ${sample.drugName} - ${sample.batches.length} batches`);

    } catch (error) {
      console.error(`‚ùå Failed to create sample batch:`, error);
    }
  }

  return {
    totalBatches: created,
    totalValue: 50,
    pharmacyBatches: created,
    opdBatches: 0,
    expiryAlerts: 0,
    success: true,
    source: "sample"
  };
}

function generateBatchSummary(result: any): string {
  return `
üéâ DRUG BATCH CREATION COMPLETED!
========================================

üìä BATCH STATISTICS:
‚îú‚îÄ‚îÄ Total Batches Created: ${result.totalBatches}
‚îú‚îÄ‚îÄ Total Inventory Value: ‡∏ø${result.totalValue.toLocaleString()}
‚îú‚îÄ‚îÄ PHARMACY Batches: ${result.pharmacyBatches}
‚îî‚îÄ‚îÄ OPD Batches: ${result.opdBatches}

‚ö†Ô∏è  EXPIRY ALERTS:
‚îú‚îÄ‚îÄ Batches expiring within 30 days: ${result.expiryAlerts}
‚îî‚îÄ‚îÄ FIFO Management: Required

üè™ INVENTORY DISTRIBUTION:
‚îú‚îÄ‚îÄ Main Warehouse (PHARMACY): ${result.pharmacyBatches} batches
‚îî‚îÄ‚îÄ OPD Department: ${result.opdBatches} batches

‚ú® BATCH MANAGEMENT FEATURES:
‚îú‚îÄ‚îÄ ‚úÖ Lot Number Tracking
‚îú‚îÄ‚îÄ ‚úÖ Expiry Date Management
‚îú‚îÄ‚îÄ ‚úÖ FIFO Rotation System
‚îú‚îÄ‚îÄ ‚úÖ Manufacturer Information
‚îú‚îÄ‚îÄ ‚úÖ Cost Per Unit Tracking
‚îú‚îÄ‚îÄ ‚úÖ Department Isolation
‚îî‚îÄ‚îÄ ‚úÖ Stock Integration

üéØ READY FOR:
‚îú‚îÄ‚îÄ ‚úÖ Batch-based Dispensing
‚îú‚îÄ‚îÄ ‚úÖ Expiry Alert System
‚îú‚îÄ‚îÄ ‚úÖ FIFO Stock Rotation
‚îú‚îÄ‚îÄ ‚úÖ Cost Analysis
‚îî‚îÄ‚îÄ ‚úÖ Traceability
`;
}