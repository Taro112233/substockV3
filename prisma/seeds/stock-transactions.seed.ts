// // prisma/seeds/stock-transactions.seed.ts - Hospital Pharmacy V3.0 Stock Transaction History
// // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å

// import { PrismaClient } from "@prisma/client";

// interface TransactionSeedData {
//   drugCode: string;
//   department: "PHARMACY" | "OPD";
//   transactions: {
//     type: "RECEIVE_EXTERNAL" | "DISPENSE_EXTERNAL" | "TRANSFER_OUT" | "TRANSFER_IN" | "ADJUST_INCREASE" | "ADJUST_DECREASE" | "RESERVE" | "UNRESERVE";
//     quantity: number; // + ‡∏´‡∏£‡∏∑‡∏≠ -
//     unitCost: number;
//     reference?: string;
//     note?: string;
//     daysAgo: number;
//     username: string;
//   }[];
// }

// export async function seedStockTransactions(prisma: PrismaClient) {
//   console.log("üìä Creating Stock Transaction History for Hospital Pharmacy V3.0...");
//   console.log("üîç Complete Audit Trail System");
//   console.log("üìà Stock Movement Tracking");

//   try {
//     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
//     const stocks = await prisma.stock.findMany({
//       include: {
//         drug: {
//           select: {
//             id: true,
//             hospitalDrugCode: true,
//             name: true,
//             pricePerBox: true
//           }
//         }
//       },
//       take: 100 // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 100 stock records
//     });

//     const users = await prisma.user.findMany({
//       select: {
//         id: true,
//         username: true,
//         firstName: true,
//         lastName: true
//       },
//       where: { status: "APPROVED", isActive: true }
//     });

//     if (stocks.length === 0) {
//       console.log("‚ö†Ô∏è  No stock records found - please run stock seed first");
//       return createBasicTransactions(prisma);
//     }

//     if (users.length === 0) {
//       console.log("‚ö†Ô∏è  No users found - please run user seed first");
//       return { success: false, message: "No users available" };
//     }

//     console.log(`üì¶ Found ${stocks.length} stock records`);
//     console.log(`üë• Found ${users.length} users`);

//     // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction history
//     const transactionData = createTransactionHistory(stocks);
    
//     // Import transactions ‡∏•‡∏á database
//     const importResult = await importTransactionsToDatabase(prisma, transactionData, stocks, users);

//     // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
//     console.log(generateTransactionSummary(importResult));

//     return {
//       totalTransactions: importResult.totalTransactions,
//       totalValue: importResult.totalValue,
//       byType: importResult.byType,
//       byDepartment: importResult.byDepartment,
//       success: true
//     };

//   } catch (error) {
//     console.error("‚ùå Failed to create stock transactions:", error);
    
//     console.log("üîÑ Creating basic transaction samples...");
//     return createBasicTransactions(prisma);
//   }
// }

// function createTransactionHistory(stocks: any[]): TransactionSeedData[] {
//   const transactionData: TransactionSeedData[] = [];
  
//   // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á 20 stocks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 40 transactions
//   const maxStocksToProcess = Math.min(20, stocks.length);

//   for (let i = 0; i < maxStocksToProcess; i++) {
//     const stock = stocks[i];
//     const drug = stock.drug;
//     const isPharmacy = stock.department === "PHARMACY";
    
//     // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ stock (2 transactions per stock = 40 total)
//     const transactions = [];

//     if (isPharmacy) {
//       // PHARMACY: ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
//       transactions.push({
//         type: "RECEIVE_EXTERNAL" as const,
//         quantity: stock.totalQuantity + 30, // ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤
//         unitCost: drug.pricePerBox * 0.7, // ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô 70%
//         reference: `PO${new Date().getFullYear()}${String(i + 1).padStart(4, '0')}`,
//         note: "‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏¢‡∏≤",
//         daysAgo: 15 + Math.floor(Math.random() * 15), // 15-30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
//         username: i % 2 === 0 ? "pharmacist1" : "pharmacist2"
//       });

//       // PHARMACY: ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ OPD ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
//       if (i % 3 === 0) {
//         transactions.push({
//           type: "TRANSFER_OUT" as const,
//           quantity: -15,
//           unitCost: drug.pricePerBox * 0.7,
//           reference: `TRF${new Date().getFullYear()}${String(i + 1).padStart(3, '0')}`,
//           note: "‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ OPD ‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å",
//           daysAgo: 5 + Math.floor(Math.random() * 5), // 5-10 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
//           username: "pharmacist1"
//         });
//       } else {
//         transactions.push({
//           type: "ADJUST_DECREASE" as const,
//           quantity: -5,
//           unitCost: drug.pricePerBox * 0.7,
//           reference: `ADJ${new Date().getFullYear()}${String(i + 1).padStart(3, '0')}`,
//           note: i % 5 === 0 ? "‡∏¢‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏•‡∏≤‡∏¢" : "‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö",
//           daysAgo: 3 + Math.floor(Math.random() * 3), // 3-6 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
//           username: "pharmacy_manager"
//         });
//       }

//     } else {
//       // OPD: ‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å PHARMACY
//       transactions.push({
//         type: "TRANSFER_IN" as const,
//         quantity: stock.totalQuantity || 15,
//         unitCost: drug.pricePerBox * 0.7,
//         reference: `TRF${new Date().getFullYear()}${String(i + 1).padStart(3, '0')}`,
//         note: "‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤",
//         daysAgo: 5 + Math.floor(Math.random() * 5), // 5-10 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
//         username: i % 2 === 0 ? "nurse1" : "nurse2"
//       });

//       // OPD: ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
//       if (stock.totalQuantity > 0) {
//         const dispensedQty = Math.min(stock.totalQuantity, Math.floor(Math.random() * 8) + 3); // 3-10
//         transactions.push({
//           type: "DISPENSE_EXTERNAL" as const,
//           quantity: -dispensedQty,
//           unitCost: drug.pricePerBox * 0.7,
//           reference: `DISP${new Date().getFullYear()}${String(i + 1).padStart(4, '0')}`,
//           note: "‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢",
//           daysAgo: Math.floor(Math.random() * 3) + 1, // 1-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
//           username: i % 2 === 0 ? "nurse1" : "nurse2"
//         });
//       } else {
//         transactions.push({
//           type: "ADJUST_INCREASE" as const,
//           quantity: 3,
//           unitCost: drug.pricePerBox * 0.7,
//           reference: `COUNT${new Date().getFullYear()}${String(i + 1).padStart(3, '0')}`,
//           note: "‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏û‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ",
//           daysAgo: 2,
//           username: "opd_manager"
//         });
//       }
//     }

//     transactionData.push({
//       drugCode: drug.hospitalDrugCode,
//       department: stock.department,
//       transactions: transactions
//     });
//   }

//   return transactionData;
// }

// async function importTransactionsToDatabase(
//   prisma: PrismaClient,
//   transactionData: TransactionSeedData[],
//   stocks: any[],
//   users: any[]
// ) {
//   console.log(`üîÑ Starting transaction import for ${transactionData.length} stock records...`);

//   let totalTransactions = 0;
//   let totalValue = 0;
//   const byType: Record<string, number> = {};
//   const byDepartment: Record<string, number> = {};

//   for (const stockData of transactionData) {
//     try {
//       // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ stock record
//       const stock = stocks.find(s => 
//         s.drug.hospitalDrugCode === stockData.drugCode && 
//         s.department === stockData.department
//       );

//       if (!stock) {
//         console.warn(`‚ö†Ô∏è  Stock not found: ${stockData.drugCode} in ${stockData.department}`);
//         continue;
//       }

//       console.log(`üìä Creating transactions for ${stock.drug.name} (${stockData.department})`);

//       // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° daysAgo (‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ timeline ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
//       const sortedTransactions = stockData.transactions.sort((a, b) => b.daysAgo - a.daysAgo);
      
//       let currentQty = 0; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°

//       for (const txData of sortedTransactions) {
//         try {
//           // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user
//           const user = users.find(u => u.username === txData.username);
//           if (!user) {
//             console.warn(`‚ö†Ô∏è  User not found: ${txData.username}`);
//             continue;
//           }

//           // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
//           const transactionDate = new Date();
//           transactionDate.setDate(transactionDate.getDate() - txData.daysAgo);

//           // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì quantity ‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á
//           const beforeQty = currentQty;
//           const quantity = txData.quantity;
//           const afterQty = Math.max(0, currentQty + quantity); // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
          
//           currentQty = afterQty;

//           // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
//           const totalCost = Math.abs(quantity) * txData.unitCost;

//           // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction record
//           await prisma.stockTransaction.create({
//             data: {
//               stockId: stock.id,
//               userId: user.id,
//               type: txData.type,
//               quantity: quantity,
//               beforeQty: beforeQty,
//               afterQty: afterQty,
//               unitCost: txData.unitCost,
//               totalCost: totalCost,
//               reference: txData.reference,
//               note: txData.note,
//               createdAt: transactionDate,
//             },
//           });

//           totalTransactions++;
//           totalValue += totalCost;
          
//           // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
//           byType[txData.type] = (byType[txData.type] || 0) + 1;
//           byDepartment[stockData.department] = (byDepartment[stockData.department] || 0) + 1;

//           console.log(`  ‚úÖ ${txData.type}: ${quantity > 0 ? '+' : ''}${quantity} (${beforeQty} ‚Üí ${afterQty})`);

//         } catch (txError) {
//           console.error(`‚ùå Failed to create transaction:`, txError);
//         }
//       }

//     } catch (stockError) {
//       console.error(`‚ùå Failed to process transactions for ${stockData.drugCode}:`, stockError);
//     }
//   }

//   return {
//     totalTransactions,
//     totalValue,
//     byType,
//     byDepartment
//   };
// }

// async function createBasicTransactions(prisma: PrismaClient) {
//   console.log("üìä Creating basic transaction samples...");
  
//   try {
//     // ‡∏´‡∏≤ stock ‡πÅ‡∏•‡∏∞ user ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
//     const stocks = await prisma.stock.findMany({ 
//       include: { drug: true },
//       take: 2 
//     });
//     const users = await prisma.user.findMany({ take: 1 });

//     if (stocks.length === 0 || users.length === 0) {
//       console.log("‚ö†Ô∏è  No stocks or users found for basic transactions");
//       return { success: false, totalTransactions: 0 };
//     }

//     let created = 0;

//     for (const stock of stocks) {
//       // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ‡∏£‡∏±‡∏ö‡∏¢‡∏≤
//       await prisma.stockTransaction.create({
//         data: {
//           stockId: stock.id,
//           userId: users[0].id,
//           type: "RECEIVE_EXTERNAL",
//           quantity: 50,
//           beforeQty: 0,
//           afterQty: 50,
//           unitCost: 10,
//           totalCost: 500,
//           reference: "SAMPLE001",
//           note: "Sample transaction",
//           createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
//         },
//       });

//       // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
//       await prisma.stockTransaction.create({
//         data: {
//           stockId: stock.id,
//           userId: users[0].id,
//           type: "ADJUST_DECREASE",
//           quantity: -10,
//           beforeQty: 50,
//           afterQty: 40,
//           unitCost: 10,
//           totalCost: 100,
//           reference: "ADJ001",
//           note: "Stock adjustment",
//           createdAt: new Date(),
//         },
//       });

//       created += 2;
//       console.log(`  ‚úÖ ${stock.drug.name} - 2 transactions`);
//     }

//     return {
//       totalTransactions: created,
//       totalValue: stocks.length * 600,
//       byType: { 
//         RECEIVE_EXTERNAL: stocks.length, 
//         ADJUST_DECREASE: stocks.length 
//       },
//       byDepartment: { 
//         PHARMACY: created 
//       },
//       success: true,
//       source: "basic"
//     };

//   } catch (error) {
//     console.error("‚ùå Failed to create basic transactions:", error);
//     return { success: false, totalTransactions: 0 };
//   }
// }

// function generateTransactionSummary(result: any): string {
//   return `
// üéâ STOCK TRANSACTION HISTORY COMPLETED!
// ======================================

// üìä TRANSACTION STATISTICS:
// ‚îú‚îÄ‚îÄ Total Transactions: ${result.totalTransactions}
// ‚îú‚îÄ‚îÄ Total Transaction Value: ‡∏ø${result.totalValue.toLocaleString()}
// ‚îî‚îÄ‚îÄ Complete Audit Trail: ‚úÖ

// üìã BY TRANSACTION TYPE:
// ${Object.entries(result.byType).map(([type, count]) => {
//   const typeNames: Record<string, string> = {
//     'RECEIVE_EXTERNAL': '‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å',
//     'DISPENSE_EXTERNAL': '‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
//     'TRANSFER_OUT': '‡πÇ‡∏≠‡∏ô‡∏¢‡∏≤‡∏≠‡∏≠‡∏Å',
//     'TRANSFER_IN': '‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤',
//     'ADJUST_INCREASE': '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å',
//     'ADJUST_DECREASE': '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å',
//     'RESERVE': '‡∏à‡∏≠‡∏á‡∏¢‡∏≤',
//     'UNRESERVE': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
//   };
//   return `‚îú‚îÄ‚îÄ ${type} (${typeNames[type] || type}): ${count} transactions`;
// }).join('\n')}

// üè™ BY DEPARTMENT:
// ${Object.entries(result.byDepartment).map(([dept, count]) => {
//   const deptNames: Record<string, string> = {
//     'PHARMACY': '‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤‡∏´‡∏•‡∏±‡∏Å',
//     'OPD': '‡πÅ‡∏ú‡∏ô‡∏Å OPD'
//   };
//   return `‚îú‚îÄ‚îÄ ${deptNames[dept] || dept}: ${count} transactions`;
// }).join('\n')}

// ‚ú® AUDIT TRAIL FEATURES:
// ‚îú‚îÄ‚îÄ ‚úÖ Complete Transaction History
// ‚îú‚îÄ‚îÄ ‚úÖ Before/After Quantity Tracking
// ‚îú‚îÄ‚îÄ ‚úÖ User Attribution
// ‚îú‚îÄ‚îÄ ‚úÖ Reference Number Linking
// ‚îú‚îÄ‚îÄ ‚úÖ Cost Tracking
// ‚îú‚îÄ‚îÄ ‚úÖ Timestamp Precision
// ‚îú‚îÄ‚îÄ ‚úÖ Department Isolation
// ‚îî‚îÄ‚îÄ ‚úÖ Real-time Updates

// üîç TRACEABILITY READY:
// ‚îú‚îÄ‚îÄ ‚úÖ Stock Movement Timeline
// ‚îú‚îÄ‚îÄ ‚úÖ User Activity Tracking
// ‚îú‚îÄ‚îÄ ‚úÖ Cost Analysis
// ‚îú‚îÄ‚îÄ ‚úÖ Inventory Valuation
// ‚îú‚îÄ‚îÄ ‚úÖ Loss/Gain Reporting
// ‚îú‚îÄ‚îÄ ‚úÖ Transfer Linking
// ‚îî‚îÄ‚îÄ ‚úÖ Compliance Reporting

// üì± MOBILE TRANSACTION FEATURES:
// ‚îú‚îÄ‚îÄ ‚úÖ Real-time Transaction Logging
// ‚îú‚îÄ‚îÄ ‚úÖ Barcode Scanning Integration
// ‚îú‚îÄ‚îÄ ‚úÖ Offline Transaction Queue
// ‚îú‚îÄ‚îÄ ‚úÖ Touch-friendly Transaction Forms
// ‚îî‚îÄ‚îÄ ‚úÖ Instant Stock Updates

// üéØ ANALYTICS READY:
// ‚îú‚îÄ‚îÄ ‚úÖ Stock Movement Patterns
// ‚îú‚îÄ‚îÄ ‚úÖ Usage Analytics
// ‚îú‚îÄ‚îÄ ‚úÖ Cost Analysis
// ‚îú‚îÄ‚îÄ ‚úÖ Waste Tracking
// ‚îú‚îÄ‚îÄ ‚úÖ Performance Metrics
// ‚îî‚îÄ‚îÄ ‚úÖ Forecasting Data

// üè• PHARMACY WORKFLOW:
// ‚îú‚îÄ‚îÄ Receive ‚Üí Track incoming inventory
// ‚îú‚îÄ‚îÄ Dispense ‚Üí Monitor outgoing drugs
// ‚îú‚îÄ‚îÄ Transfer ‚Üí Inter-department tracking
// ‚îú‚îÄ‚îÄ Adjust ‚Üí Stock corrections & audits
// ‚îî‚îÄ‚îÄ Reserve ‚Üí Pre-allocation system
// `;
// }