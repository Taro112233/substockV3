// prisma/seeds/users.seed.ts - Hospital Pharmacy V3.0 User Management
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 2 ‡πÅ‡∏ú‡∏ô‡∏Å

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../../lib/auth";

interface UserSeedData {
  username: string;
  email?: string;
  password: string;
  firstName: string;
  lastName: string;
  position?: string;
  role?: string;
  status: "UNAPPROVED" | "APPROVED" | "SUSPENDED" | "INACTIVE";
  isActive: boolean;
}

export async function seedUsers(prisma: PrismaClient) {
  console.log("üë• Creating Hospital Pharmacy V3.0 Users...");
  console.log("üè• Single Hospital - Department Based Users");

  const users: UserSeedData[] = [
    // üîß System Developer (‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à)
    {
      username: "developer",
      email: "dev@hospital.local",
      password: "dev123",
      firstName: "System",
      lastName: "Developer",
      position: "System Developer",
      role: "ADMIN",
      status: "APPROVED",
      isActive: true,
    },

    // üë®‚Äç‚öïÔ∏è ‡∏Ñ‡∏•‡∏±‡∏á‡∏¢‡∏≤ (PHARMACY) Users
    {
      username: "pharmacy_manager",
      email: "pharmacy.manager@hospital.local",
      password: "pharmacy123",
      firstName: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
      lastName: "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡πÄ‡∏ß‡∏ä",
      position: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£",
      role: "PHARMACY_MANAGER",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "pharmacist1",
      email: "pharmacist1@hospital.local",
      password: "pharma123",
      firstName: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á",
      lastName: "‡πÉ‡∏à‡∏î‡∏µ",
      position: "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£",
      role: "PHARMACY_STAFF",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "pharmacist2",
      email: "pharmacist2@hospital.local",
      password: "pharma123",
      firstName: "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢",
      lastName: "‡∏£‡∏±‡∏Å‡∏©‡πå‡∏î‡∏µ",
      position: "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£",
      role: "PHARMACY_STAFF",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "pharmacy_tech1",
      email: "pharmtech1@hospital.local",
      password: "tech123",
      firstName: "‡∏°‡∏≤‡∏•‡∏µ",
      lastName: "‡∏Ç‡∏¢‡∏±‡∏ô‡∏´‡∏≤",
      position: "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
      role: "PHARMACY_STAFF",
      status: "APPROVED",
      isActive: true,
    },

    // üè• OPD Users
    {
      username: "opd_manager",
      email: "opd.manager@hospital.local",
      password: "opd123",
      firstName: "‡∏õ‡∏£‡∏∞‡∏†‡∏≤‡∏™",
      lastName: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ",
      position: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ OPD",
      role: "OPD_MANAGER",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "nurse1",
      email: "nurse1@hospital.local",
      password: "nurse123",
      firstName: "‡∏™‡∏∏‡∏†‡∏≤",
      lastName: "‡∏î‡∏π‡πÅ‡∏•‡∏î‡∏µ",
      position: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û",
      role: "OPD_STAFF",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "nurse2",
      email: "nurse2@hospital.local",
      password: "nurse123",
      firstName: "‡∏ß‡∏±‡∏ô‡∏î‡∏µ",
      lastName: "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏î‡∏µ",
      position: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û",
      role: "OPD_STAFF",
      status: "APPROVED",
      isActive: true,
    },
    {
      username: "opd_clerk",
      email: "opdclerk@hospital.local",
      password: "clerk123",
      firstName: "‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢",
      lastName: "‡∏ä‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
      position: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà OPD",
      role: "OPD_STAFF",
      status: "APPROVED",
      isActive: true,
    },

    // üîê Admin Users
    {
      username: "admin",
      email: "admin@hospital.local",
      password: "admin123",
      firstName: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
      lastName: "‡∏£‡∏∞‡∏ö‡∏ö",
      position: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
      role: "ADMIN",
      status: "APPROVED",
      isActive: true,
    },

    // üìã Test Users for Demo
    {
      username: "testuser",
      email: "test@hospital.local",
      password: "test123",
      firstName: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
      lastName: "‡∏£‡∏∞‡∏ö‡∏ö",
      position: "‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
      role: "OPD_STAFF",
      status: "APPROVED",
      isActive: true,
    },

    // ‚è≥ Unapproved Users (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)
    {
      username: "newuser1",
      email: "newuser1@hospital.local",
      password: "newuser123",
      firstName: "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
      lastName: "‡πÉ‡∏´‡∏°‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á",
      position: "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
      role: "OPD_STAFF",
      status: "UNAPPROVED",
      isActive: true,
    },
    {
      username: "newuser2",
      email: "newuser2@hospital.local",
      password: "newuser123",
      firstName: "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
      lastName: "‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≠‡∏á",
      position: "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
      role: "PHARMACY_STAFF",
      status: "UNAPPROVED",
      isActive: true,
    },
  ];

  console.log(`üìä Creating ${users.length} users...`);
  
  const results = {
    created: 0,
    updated: 0,
    byRole: {} as Record<string, number>,
    byStatus: {} as Record<string, number>,
  };

  for (const userData of users) {
    try {
      // Hash password
      const hashedPassword = await hashPassword(userData.password);
      
      // Create or update user
      const user = await prisma.user.upsert({
        where: { username: userData.username },
        update: {
          firstName: userData.firstName,
          lastName: userData.lastName,
          position: userData.position,
          status: userData.status,
          isActive: userData.isActive,
          lastLogin: userData.status === "APPROVED" ? new Date() : null,
        },
        create: {
          username: userData.username,
          password: hashedPassword,
          firstName: userData.firstName,
          lastName: userData.lastName,
          position: userData.position || null,
          status: userData.status,
          isActive: userData.isActive,
          lastLogin: userData.status === "APPROVED" ? new Date() : null,
        },
      });

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÉ‡∏´‡∏°‡πà
      if (!await prisma.user.findUnique({ where: { username: userData.username } })) {
        results.created++;
      } else {
        results.updated++;
      }

      // ‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      const role = userData.role || "STAFF";
      results.byRole[role] = (results.byRole[role] || 0) + 1;
      results.byStatus[userData.status] = (results.byStatus[userData.status] || 0) + 1;

      console.log(`  ‚úÖ ${userData.firstName} ${userData.lastName} (${userData.username})`);
      console.log(`      Role: ${role} | Status: ${userData.status} | Position: ${userData.position || 'N/A'}`);

    } catch (error) {
      console.error(`  ‚ùå Failed to create user ${userData.username}:`, error);
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
  console.log(`\nüìä User Creation Summary:`);
  console.log(`  ‚úÖ Created: ${results.created} users`);
  console.log(`  üîÑ Updated: ${results.updated} users`);
  console.log(`  üë• Total: ${results.created + results.updated} users`);

  console.log(`\nüìã Users by Role:`);
  Object.entries(results.byRole).forEach(([role, count]) => {
    const roleDescriptions: Record<string, string> = {
      "ADMIN": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
      "PHARMACY_MANAGER": "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£", 
      "PHARMACY_STAFF": "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏°",
      "OPD_MANAGER": "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ OPD",
      "OPD_STAFF": "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà OPD"
    };
    console.log(`  - ${role} (${roleDescriptions[role] || role}): ${count} ‡∏Ñ‡∏ô`);
  });

  console.log(`\nüìà Users by Status:`);
  Object.entries(results.byStatus).forEach(([status, count]) => {
    const statusDescriptions: Record<string, string> = {
      "APPROVED": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
      "UNAPPROVED": "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      "SUSPENDED": "‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      "INACTIVE": "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    };
    console.log(`  - ${status} (${statusDescriptions[status] || status}): ${count} ‡∏Ñ‡∏ô`);
  });

  console.log(`\nüîê Login Information:`);
  console.log(`  üîß Developer: developer / dev123`);
  console.log(`  üíä Pharmacy Manager: pharmacy_manager / pharmacy123`);
  console.log(`  üíä Pharmacist: pharmacist1 / pharma123`);
  console.log(`  üè• OPD Manager: opd_manager / opd123`);
  console.log(`  üë©‚Äç‚öïÔ∏è Nurse: nurse1 / nurse123`);
  console.log(`  üîê Admin: admin / admin123`);
  console.log(`  üß™ Test User: testuser / test123`);

  console.log(`\n‚ö†Ô∏è  Unapproved Users (for testing approval workflow):`);
  console.log(`  - newuser1 / newuser123 (‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)`);
  console.log(`  - newuser2 / newuser123 (‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£‡∏£‡∏° - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)`);

  console.log(`\nüéØ Ready for Hospital Pharmacy V3.0 Testing!`);
  console.log(`   üì± Mobile-first design testing`);
  console.log(`   üîÑ Transfer workflow testing`);
  console.log(`   üìä Department isolation testing`);
  console.log(`   üîê Role-based access testing`);
  console.log(`   ‚úÖ User approval workflow testing`);

  return {
    totalUsers: results.created + results.updated,
    created: results.created,
    updated: results.updated,
    byRole: results.byRole,
    byStatus: results.byStatus,
    success: true
  };
}