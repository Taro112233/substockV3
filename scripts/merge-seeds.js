// scripts/merge-seeds-updated.js - Hospital Pharmacy V3.0 Complete Seed Merger
// ระบบรวม seed files ครบถ้วนสำหรับโรงพยาบาลเดียว 2 แผนก พร้อมระบบใบเบิก

const fs = require("fs");
const path = require("path");

const SEEDS_DIR = path.join(__dirname, "../prisma/seeds");
const OUTPUT_FILE = path.join(__dirname, "../prisma/seed.ts");

// กำหนดลำดับการ seed
const SEED_ORDER = {
  "users.seed.ts": 1,
  "unified-csv.seed.ts": 2,
};

function extractExportedFunction(content, filename) {
  const functionMatch = content.match(
    /export async function (\w+)\([^)]*\)\s*\{/
  );

  if (!functionMatch) {
    console.warn(`⚠️  No exported function found in ${filename}`);
    return null;
  }

  const functionName = functionMatch[1];

  return {
    name: functionName,
    sourceFile: filename,
    content: content,
  };
}

function mergeSeeds() {
  console.log("🌱 Hospital Pharmacy V3.0 Seed Merger");
  console.log("🏥 Single Hospital - 2 Departments");
  
  if (!fs.existsSync(SEEDS_DIR)) {
    console.error(`❌ Seeds directory not found: ${SEEDS_DIR}`);
    process.exit(1);
  }

  const seedFiles = fs
    .readdirSync(SEEDS_DIR)
    .filter((file) => file.endsWith(".seed.ts"))
    .filter((file) => SEED_ORDER[file] && SEED_ORDER[file] < 900)
    .sort((a, b) => {
      const orderA = SEED_ORDER[a] ?? 999;
      const orderB = SEED_ORDER[b] ?? 999;
      return orderA - orderB;
    });

  if (seedFiles.length === 0) {
    console.error("❌ No active seed files found");
    process.exit(1);
  }

  console.log(`📁 Found ${seedFiles.length} active seed files`);

  const extractedFunctions = [];
  const imports = [];

  for (const file of seedFiles) {
    const filePath = path.join(SEEDS_DIR, file);
    const content = fs.readFileSync(filePath, "utf8");

    const extracted = extractExportedFunction(content, file);
    if (extracted) {
      extractedFunctions.push(extracted);

      const moduleBaseName = file.replace(".seed.ts", "");
      imports.push(
        `import { ${extracted.name} } from "./seeds/${moduleBaseName}.seed";`
      );
    }
  }

  // ตรวจสอบ functions ที่สำคัญ
  const hasUsersFunction = extractedFunctions.some(
    (f) => f.name === "seedUsers"
  );
  const hasUnifiedCSVFunction = extractedFunctions.some(
    (f) => f.name === "seedUnifiedCSV"
  );
  const hasCompleteTransfersFunction = extractedFunctions.some(
    (f) => f.name === "seedTransfersWithTransactions"
  );

  // Generate merged seed file
  const mergedContent = generateCompleteSeed(extractedFunctions, imports, {
    hasUsersFunction,
    hasUnifiedCSVFunction,
    hasCompleteTransfersFunction,
  });

  // Write merged file
  try {
    fs.writeFileSync(OUTPUT_FILE, mergedContent, "utf8");
    console.log(`✅ Generated: ${OUTPUT_FILE}`);
    console.log(`🚀 Ready to run: npm run db:setup`);
  } catch (error) {
    console.error("❌ Failed to write merged seed:", error.message);
    process.exit(1);
  }
}

function generateCompleteSeed(functions, imports, seedFlags) {
  const {
    hasUsersFunction,
    hasUnifiedCSVFunction,
    hasCompleteTransfersFunction,
  } = seedFlags;

  return `// prisma/seed.ts - Hospital Pharmacy V3.0 Complete System Seed
// Generated by scripts/merge-seeds-updated.js
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/auth";

${imports.join("\n")}

const prisma = new PrismaClient();

async function main() {
  console.log("🌱 Starting Hospital Pharmacy V3.0 Seed...");
  
  try {
    // USER MANAGEMENT
    console.log("👥 Creating users...");
    
    ${
      hasUsersFunction
        ? `
    const userResult = await seedUsers(prisma);
    console.log(\`✅ Users: \${userResult.totalUsers}\`);
    `
        : `
    const hashedPassword = await hashPassword("admin123");
    
    await prisma.user.upsert({
      where: { username: "admin" },
      update: {},
      create: {
        username: "admin",
        password: hashedPassword,
        firstName: "ผู้ดูแล",
        lastName: "ระบบ",
        position: "System Administrator",
        status: "APPROVED",
        isActive: true,
      },
    });
    
    console.log("✅ Users: admin/admin123");
    `
    }

    // DATA IMPORT
    console.log("📁 Importing data...");
    
    ${
      hasUnifiedCSVFunction
        ? `
    const csvResult = await seedUnifiedCSV(prisma);
    console.log(\`✅ Drugs: \${csvResult.drugs}, Stocks: \${csvResult.stocks}\`);
    `
        : `
    const drug = await prisma.drug.upsert({
      where: { hospitalDrugCode: "TH001" },
      update: {},
      create: {
        hospitalDrugCode: "TH001",
        name: "Paracetamol 500mg",
        genericName: "Paracetamol",
        dosageForm: "TAB",
        strength: "500",
        unit: "mg",
        packageSize: "100",
        pricePerBox: 120.00,
        category: "GENERAL",
        isActive: true,
      },
    });
    
    await prisma.stock.upsert({
      where: {
        drugId_department: {
          drugId: drug.id,
          department: "PHARMACY"
        }
      },
      update: {},
      create: {
        drugId: drug.id,
        department: "PHARMACY",
        totalQuantity: 100,
        reservedQty: 0,
        minimumStock: 20,
        totalValue: 8400,
      },
    });
    
    console.log("✅ Essential data created");
    `
    }

    // TRANSFER SYSTEM
    console.log("🔄 Creating transfers...");
    
    ${
      hasCompleteTransfersFunction
        ? `
    const transferResult = await seedTransfersWithTransactions(prisma);
    console.log(\`✅ Transfers: \${transferResult.totalTransfers}\`);
    `
        : `
    console.log("✅ Transfer system ready");
    `
    }

    // VERIFICATION
    console.log("🔍 Verifying system...");
    const verification = await verifySystem(prisma);
    
    console.log("="+"=".repeat(40));
    console.log("🎉 Hospital Pharmacy V3.0 Ready!");
    console.log(\`📊 Users: \${verification.users}, Drugs: \${verification.drugs}\`);
    console.log(\`📦 Stocks: \${verification.stocks}, Transfers: \${verification.transfers}\`);
    console.log("🚀 Next: npm run dev");

  } catch (error) {
    console.error("💥 Seed error:", error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

async function verifySystem(prisma: PrismaClient) {
  try {
    const [users, drugs, stocks, transfers] = await Promise.all([
      prisma.user.count(),
      prisma.drug.count(),
      prisma.stock.count(),
      prisma.transfer.count().catch(() => 0),
    ]);

    return { users, drugs, stocks, transfers };
  } catch (error) {
    console.error("❌ Verification failed:", error.message);
    return { users: 0, drugs: 0, stocks: 0, transfers: 0 };
  }
}

main()
  .catch((e) => {
    console.error("💥 FATAL ERROR:");
    console.error(e.message);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

export { prisma };`;
}

// Execute if run directly
if (require.main === module) {
  mergeSeeds();
}

module.exports = { mergeSeeds };