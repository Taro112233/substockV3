// scripts/merge-seeds.js - Hospital Pharmacy V3.0 Seed Merger
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏° seed files ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 2 ‡πÅ‡∏ú‡∏ô‡∏Å

const fs = require('fs');
const path = require('path');

const SEEDS_DIR = path.join(__dirname, '../prisma/seeds');
const OUTPUT_FILE = path.join(__dirname, '../prisma/seed.ts');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£ seed ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
const SEED_ORDER = {
  'users.seed.ts': 1,
  'real-drugs.seed.ts': 2,
  'demo-data.seed.ts': 3,
  'stock-transactions.seed.ts': 4,
};

function extractExportedFunction(content, filename) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ export function
  const functionMatch = content.match(/export async function (\w+)\([^)]*\)\s*\{/);
  
  if (!functionMatch) {
    console.warn(`‚ö†Ô∏è  No exported function found in ${filename}`);
    return null;
  }

  const functionName = functionMatch[1];
  
  return {
    name: functionName,
    sourceFile: filename,
    content: content
  };
}

function mergeSeeds() {
  console.log('üå± Hospital Pharmacy V3.0 Seed Merger');
  console.log('=====================================');
  console.log('üè• Single Hospital System - Department Based');
  console.log('üì± Mobile-First PWA Ready');
  
  if (!fs.existsSync(SEEDS_DIR)) {
    console.error(`‚ùå Seeds directory not found: ${SEEDS_DIR}`);
    process.exit(1);
  }

  const seedFiles = fs.readdirSync(SEEDS_DIR)
    .filter(file => file.endsWith('.seed.ts'))
    .sort((a, b) => {
      const orderA = SEED_ORDER[a] ?? 999;
      const orderB = SEED_ORDER[b] ?? 999;
      return orderA - orderB;
    });

  if (seedFiles.length === 0) {
    console.error('‚ùå No .seed.ts files found in seeds directory');
    process.exit(1);
  }

  console.log(`üìÅ Found ${seedFiles.length} seed files:`);
  seedFiles.forEach((file, index) => {
    const order = SEED_ORDER[file] ?? 999;
    console.log(`  ${order}. ${file}`);
  });

  const extractedFunctions = [];
  const imports = [];

  // Extract functions ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á imports
  for (const file of seedFiles) {
    const filePath = path.join(SEEDS_DIR, file);
    const content = fs.readFileSync(filePath, 'utf8');
    
    console.log(`üìñ Processing ${file}...`);
    
    const extracted = extractExportedFunction(content, file);
    if (extracted) {
      extractedFunctions.push(extracted);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á import statement
      const moduleBaseName = file.replace('.seed.ts', '');
      imports.push(`import { ${extracted.name} } from "./seeds/${moduleBaseName}.seed";`);
      
      console.log(`  ‚úÖ Extracted function: ${extracted.name}`);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ function ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hasUsersFunction = extractedFunctions.some(f => f.name === 'seedUsers');
  const hasDrugsFunction = extractedFunctions.some(f => f.name === 'seedRealDrugs');

  if (!hasUsersFunction) {
    console.warn('‚ö†Ô∏è  No seedUsers function found - users will be created manually');
  }
  
  if (!hasDrugsFunction) {
    console.warn('‚ö†Ô∏è  No seedRealDrugs function found - sample drugs will be created');
  }

  // Generate merged seed file
  const mergedContent = generateMergedSeed(extractedFunctions, imports, hasUsersFunction, hasDrugsFunction);
  
  // Write merged file
  try {
    fs.writeFileSync(OUTPUT_FILE, mergedContent, 'utf8');
    console.log(`\n‚úÖ Successfully merged ${extractedFunctions.length} seed functions`);
    console.log(`üì¶ Generated: ${OUTPUT_FILE}`);
    console.log(`üéØ Ready for Hospital Pharmacy V3.0 system`);
  } catch (error) {
    console.error('‚ùå Failed to write merged seed:', error.message);
    process.exit(1);
  }
}

function generateMergedSeed(functions, imports, hasUsersFunction, hasDrugsFunction) {
  const seedContent = `// prisma/seed.ts - Hospital Pharmacy V3.0 Auto-generated Seed
// Generated by scripts/merge-seeds.js for Single Hospital System
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/auth";

${imports.join('\n')}

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting Hospital Pharmacy V3.0 Seed...");
  console.log("üè• Single Hospital - Two Department System");
  console.log("üì± Mobile-First PWA Architecture");
  console.log("üîê JWT Authentication System");

  try {
    // ================================
    // PHASE 1: USER MANAGEMENT
    // ================================
    console.log("\\nüë• PHASE 1: User Management");
    
    ${hasUsersFunction ? `
    // Create comprehensive user system
    const userResult = await seedUsers(prisma);
    console.log(\`‚úÖ User creation completed: \${userResult.totalUsers} users\`);
    console.log(\`üìä By Role: \${JSON.stringify(userResult.byRole)}\`);
    console.log(\`üìà By Status: \${JSON.stringify(userResult.byStatus)}\`);
    ` : `
    // Create basic users manually
    console.log("üë§ Creating basic users...");
    
    const hashedPassword = await hashPassword("admin123");
    
    const adminUser = await prisma.user.upsert({
      where: { username: "admin" },
      update: {},
      create: {
        username: "admin",
        password: hashedPassword,
        firstName: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        lastName: "‡∏£‡∏∞‡∏ö‡∏ö",
        position: "System Administrator",
        status: "APPROVED",
        isActive: true,
        lastLogin: new Date(),
      },
    });
    
    const testPassword = await hashPassword("test123");
    
    const testUser = await prisma.user.upsert({
      where: { username: "testuser" },
      update: {},
      create: {
        username: "testuser",
        password: testPassword,
        firstName: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        lastName: "‡∏£‡∏∞‡∏ö‡∏ö",
        position: "Tester",
        status: "APPROVED",
        isActive: true,
        lastLogin: new Date(),
      },
    });
    
    const userResult = {
      totalUsers: 2,
      created: 2,
      byRole: { ADMIN: 1, USER: 1 },
      byStatus: { APPROVED: 2 }
    };
    
    console.log("‚úÖ Basic users created");
    console.log("üîê Admin: admin / admin123");
    console.log("üß™ Test: testuser / test123");
    `}

    // ================================
    // PHASE 2: DRUG INVENTORY
    // ================================
    console.log("\\nüíä PHASE 2: Drug Inventory System");
    
    ${hasDrugsFunction ? `
    // Import drugs from CSV or create comprehensive drug database
    const drugResult = await seedRealDrugs(prisma);
    console.log(\`‚úÖ Drug import completed: \${drugResult.totalProcessed} drugs\`);
    console.log(\`üí∞ Total inventory value: ‡∏ø\${drugResult.totalValue?.toLocaleString() || 0}\`);
    
    if (drugResult.categoriesCount) {
      console.log("üìã Drug Categories:");
      Object.entries(drugResult.categoriesCount).forEach(([category, count]) => {
        console.log(\`   - \${category}: \${count} drugs\`);
      });
    }
    ` : `
    // Create basic sample drugs
    console.log("üíä Creating sample drugs...");
    
    const sampleDrugs = [
      {
        hospitalDrugCode: "TH001",
        name: "Paracetamol 500mg",
        genericName: "Paracetamol",
        dosageForm: "TAB",
        strength: "500",
        unit: "mg",
        packageSize: "100", // String ‡∏ï‡∏≤‡∏° schema
        pricePerBox: 120.00,
        category: "GENERAL",
        notes: "Pain reliever and fever reducer",
        isActive: true,
        isHighAlert: false,
        isControlled: false,
        isNarcotic: false,
      },
      {
        hospitalDrugCode: "TH002",
        name: "Amoxicillin 250mg",
        genericName: "Amoxicillin",
        dosageForm: "CAP",
        strength: "250", 
        unit: "mg",
        packageSize: "100", // String ‡∏ï‡∏≤‡∏° schema
        pricePerBox: 200.00,
        category: "GENERAL",
        notes: "Antibiotic",
        isActive: true,
        isHighAlert: false,
        isControlled: false,
        isNarcotic: false,
      },
    ];
    
    let drugCount = 0;
    for (const drugData of sampleDrugs) {
      const drug = await prisma.drug.upsert({
        where: { hospitalDrugCode: drugData.hospitalDrugCode },
        update: {},
        create: drugData,
      });
      
      // Create stock for PHARMACY department
      await prisma.stock.upsert({
        where: {
          drugId_department: {
            drugId: drug.id,
            department: "PHARMACY"
          }
        },
        update: {},
        create: {
          drugId: drug.id,
          department: "PHARMACY",
          totalQuantity: 50,
          reservedQty: 0,
          minimumStock: 10,
          totalValue: 50 * drugData.pricePerBox,
        },
      });
      
      // Create stock for OPD department
      await prisma.stock.upsert({
        where: {
          drugId_department: {
            drugId: drug.id,
            department: "OPD"
          }
        },
        update: {},
        create: {
          drugId: drug.id,
          department: "OPD",
          totalQuantity: 0,
          reservedQty: 0,
          minimumStock: 5,
          totalValue: 0,
        },
      });
      
      drugCount++;
    }
    
    const drugResult = {
      totalProcessed: drugCount,
      totalValue: 13000,
      source: "sample"
    };
    
    console.log(\`‚úÖ Created \${drugCount} sample drugs\`);
    `}

    // ================================
    // PHASE 3: ADDITIONAL SEEDS
    // ================================
    console.log("\\nüéØ PHASE 3: Additional System Components");
    
    ${functions.filter(f => !['seedUsers', 'seedRealDrugs'].includes(f.name)).map(f => `
    // Execute ${f.name}
    try {
      const ${f.name.replace('seed', '').toLowerCase()}Result = await ${f.name}(prisma);
      console.log(\`‚úÖ ${f.name} completed successfully\`);
    } catch (error) {
      console.warn(\`‚ö†Ô∏è  ${f.name} failed: \${error.message}\`);
    }
    `).join('')}

    // ================================
    // PHASE 4: SYSTEM VERIFICATION
    // ================================
    console.log("\\nüîç PHASE 4: System Verification");
    
    const verification = await verifySystemIntegrity(prisma);
    console.log("‚úÖ System verification completed");

    // ================================
    // FINAL SUMMARY
    // ================================
    console.log("\\nüéâ HOSPITAL PHARMACY V3.0 SEED COMPLETED!");
    console.log("=" * 50);
    
    console.log(\`
üè• HOSPITAL SYSTEM SUMMARY:
‚îú‚îÄ‚îÄ Users Created: \${userResult.totalUsers || 0}
‚îú‚îÄ‚îÄ Drugs Imported: \${drugResult.totalProcessed || 0}
‚îú‚îÄ‚îÄ Total Inventory Value: ‡∏ø\${(drugResult.totalValue || 0).toLocaleString()}
‚îî‚îÄ‚îÄ System Status: ‚úÖ Ready

üéØ KEY FEATURES READY:
‚îú‚îÄ‚îÄ ‚úÖ JWT Authentication System
‚îú‚îÄ‚îÄ ‚úÖ Department Isolation (PHARMACY/OPD)
‚îú‚îÄ‚îÄ ‚úÖ Stock Management
‚îú‚îÄ‚îÄ ‚úÖ Transfer System
‚îú‚îÄ‚îÄ ‚úÖ Mobile-First PWA
‚îú‚îÄ‚îÄ ‚úÖ Real-time Updates
‚îî‚îÄ‚îÄ ‚úÖ Transaction Tracking

üîê LOGIN INFORMATION:
${hasUsersFunction ? `
‚îú‚îÄ‚îÄ üîß Developer: developer / dev123
‚îú‚îÄ‚îÄ üíä Pharmacy Manager: pharmacy_manager / pharmacy123
‚îú‚îÄ‚îÄ üè• OPD Manager: opd_manager / opd123
‚îú‚îÄ‚îÄ üë©‚Äç‚öïÔ∏è Nurse: nurse1 / nurse123
‚îú‚îÄ‚îÄ üîê Admin: admin / admin123
‚îî‚îÄ‚îÄ üß™ Test User: testuser / test123
` : `
‚îú‚îÄ‚îÄ üîê Admin: admin / admin123
‚îî‚îÄ‚îÄ üß™ Test User: testuser / test123
`}

üì± MOBILE-FIRST FEATURES:
‚îú‚îÄ‚îÄ ‚úÖ Touch-optimized interface
‚îú‚îÄ‚îÄ ‚úÖ PWA installation
‚îú‚îÄ‚îÄ ‚úÖ Offline capability
‚îú‚îÄ‚îÄ ‚úÖ Push notifications ready
‚îî‚îÄ‚îÄ ‚úÖ Responsive design

üöÄ NEXT STEPS:
1. npm run dev
2. Open http://localhost:3000
3. Login with any of the accounts above
4. Test department isolation
5. Test transfer workflow
6. Install as PWA on mobile

üìã DEPARTMENT WORKFLOW:
‚îú‚îÄ‚îÄ PHARMACY: Manage main inventory
‚îú‚îÄ‚îÄ OPD: Request drugs from pharmacy
‚îú‚îÄ‚îÄ Transfer: Real-time stock transfer
‚îî‚îÄ‚îÄ Tracking: Complete audit trail
    \`);

  } catch (error) {
    console.error("‚ùå Seed failed:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ================================
// SYSTEM VERIFICATION FUNCTION
// ================================
async function verifySystemIntegrity(prisma: PrismaClient) {
  console.log("üîç Verifying Hospital Pharmacy V3.0 system integrity...");
  
  try {
    const counts = await Promise.all([
      prisma.user.count(),
      prisma.drug.count(),
      prisma.stock.count(),
      prisma.stockTransaction.count().catch(() => 0),
      prisma.transfer.count().catch(() => 0),
    ]);

    const [users, drugs, stocks, transactions, transfers] = counts;

    // Check department isolation
    const pharmacyStocks = await prisma.stock.count({ 
      where: { department: "PHARMACY" } 
    });
    const opdStocks = await prisma.stock.count({ 
      where: { department: "OPD" } 
    });

    console.log(\`
üîç SYSTEM INTEGRITY VERIFICATION:
‚îú‚îÄ‚îÄ Data Consistency:
‚îÇ   ‚îú‚îÄ‚îÄ Users: \${users} ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ Drugs: \${drugs} ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ Stock Records: \${stocks} ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ Transactions: \${transactions} ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ Transfers: \${transfers} ‚úÖ
‚îú‚îÄ‚îÄ Department Isolation:
‚îÇ   ‚îú‚îÄ‚îÄ PHARMACY Stocks: \${pharmacyStocks} ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ OPD Stocks: \${opdStocks} ‚úÖ
‚îî‚îÄ‚îÄ System Status: ‚úÖ All systems operational
    \`);

    return {
      integrity: true,
      counts: { users, drugs, stocks, transactions, transfers },
      departments: { pharmacy: pharmacyStocks, opd: opdStocks }
    };

  } catch (error) {
    console.error("‚ùå Verification failed:", error);
    return { integrity: false, error };
  }
}

// Execute main function
main()
  .catch((e) => {
    console.error("üí• Fatal error during seeding:", e);
    process.exit(1);
  });

export { prisma };`;

  return seedContent;
}

// Main execution
if (require.main === module) {
  try {
    mergeSeeds();
    console.log(`
üéâ Hospital Pharmacy V3.0 Seed Merge Completed!

‚ú® System Features Ready:
  ‚úÖ Single Hospital Architecture
  ‚úÖ Two Department System (PHARMACY/OPD)
  ‚úÖ JWT Authentication
  ‚úÖ Mobile-First PWA Design
  ‚úÖ Department Isolation
  ‚úÖ Real-time Stock Management
  ‚úÖ Transfer Workflow System
  ‚úÖ Complete Audit Trail

üìã Generated Files:
  ‚úÖ prisma/seed.ts (Main seed file)
  ‚úÖ Auto-imports from prisma/seeds/*.seed.ts

üöÄ Ready to Run:
  1. npm run db:push (to apply schema)
  2. npm run db:seed (to populate data)
  3. npm run dev (to start development)

üì± Mobile Testing:
  1. Open on mobile browser
  2. Install as PWA
  3. Test offline functionality
  4. Test department switching

üí° CSV Drug Import:
  - Place your CSV file in project root
  - Name it '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤  CSV export 3.csv'
  - Run seed to auto-import drugs
  - Fallback to sample data if CSV not found
`);
  } catch (error) {
    console.error('‚ùå Merge failed:', error.message);
    process.exit(1);
  }
}

module.exports = { mergeSeeds };